{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LizSync # LizSync is a set of tools allowing performing PostgreSQL database synchronization between a central database and one or many clone databases. The central database is the full PostgreSQL database, containing stable data. It is the source of trust. The clone database is a PostgreSQL database installed on a computer, other server, tablet. It contains a subset of schemas and tables from the central database. It may be dropped or recreated. It has been created by deploying an archive created with the QGIS plugin. Synchronization is done for data of tables in chosen schemas, between tables having the same structure . No synchronization is made on structure changes (adding a column, creating or dropping tables, etc.). It is based on PostgreSQL and QGIS: PostgreSQL : a schema audit contains tables, functions and triggers in charge of recording every actions made on tables: inserts, updates and deletes. It is a (small) adaptation of the audit trigger tool a schema lizsync contains tables and functions helping to manage the sync actions, stores history and information on central and clones databases. QGIS with a set of processing algorithms to help the user to: prepare a database for synchronization, create an archive from database and deploy it on clones, perform the synchronization.","title":"Home"},{"location":"#lizsync","text":"LizSync is a set of tools allowing performing PostgreSQL database synchronization between a central database and one or many clone databases. The central database is the full PostgreSQL database, containing stable data. It is the source of trust. The clone database is a PostgreSQL database installed on a computer, other server, tablet. It contains a subset of schemas and tables from the central database. It may be dropped or recreated. It has been created by deploying an archive created with the QGIS plugin. Synchronization is done for data of tables in chosen schemas, between tables having the same structure . No synchronization is made on structure changes (adding a column, creating or dropping tables, etc.). It is based on PostgreSQL and QGIS: PostgreSQL : a schema audit contains tables, functions and triggers in charge of recording every actions made on tables: inserts, updates and deletes. It is a (small) adaptation of the audit trigger tool a schema lizsync contains tables and functions helping to manage the sync actions, stores history and information on central and clones databases. QGIS with a set of processing algorithms to help the user to: prepare a database for synchronization, create an archive from database and deploy it on clones, perform the synchronization.","title":"LizSync"},{"location":"CHANGELOG/","text":"CHANGELOG # 0.4.5 - 2020-09-18 # Prepare the central database - Allow to not add automatically the audit triggers Create a package - Do not block the creation if some tables of the synchronized schemas are not audited. Deploy a package - Apply the audit triggers only on tables audited in the central database Deploy a package - Add a checkbox to force the re-creation of the clone server ID in the metadata table (useful to start fresh) Add unit tests for database synchronization with scenarios Autodocumentation of the algorithms https://docs.3liz.org/qgis-lizsync-plugin/processing/ 0.4.4 - 2020-06-08 # Interface - Dock: simplify button labels & add tooltips Documentation - Publish database schema & user manual (in French): https://docs.3liz.org/qgis-lizsync-plugin Continuous integration - improve CI scripts 0.4.3 - 2020-05-31 # Tools - pg_dump: detect pg_dump error Synchronize database - Fix bug in SQL function 0.4.2 - 2020-05-29 # Add more translations into French 0.4.1 - 2020-05-08 # Database function - Improve speed of lizsync.synchronize() & add PostgreSQL notices Update translations 0.4.0 - 2020-05-27 # Synchronization - Move all logic from Python to PostgreSQL functions Remove configure plugin algorithm: last used values are now saved by each algorithm Create structure - Hide override parameters to avoid data loss PostgreSQL - Get password from pgpass file if not found elsewhere Install - Add missing upgrade script to 0.3.2 & fix test Tests - Update docker-compose project, add schemaspy, add test migration Improve script run_test.sh 0.3.6 - 2020-05-18 # Send project to clone - parameters: add password and remove clone connection Get projects from FTP - Hardcode geopoppy db params && use fileinput to get rid of bug Get projects from FTP - Add password and option to adapt project for geopoppy Test data - fix encoding for subdistricts layer Database sync - Move conflict storing into a function Update python version in github action Check flake 8 on github 0.3.5 - 2020-05-01 # Bidirectionnal synchronization - Make sure to truncate clone audit log, even for rejected actions Tools - Get password: if no service is given, try to get password also from PGPASSWORD environment variable Run migrations on CI since 0.2.2 Disable pushing to transifex from PR Improve travis Switch to 3liz bot for CI 0.3.4 - 2020-04-16 # Database synchro - Correctly update central audit.logged_actions for discarded UPDATEs Add missing flag for processing provider in metadata.txt Minor code cleanup Fix travis path when pushing QM to github Update translations from Transifex 0.3.3 - 2020-04-09 # Synchronize media subfolder - Fix bug with localdir variable not set PostgreSQL connection - Get password from ini file if not given Improve continuous integration: translations, tests Code cleaning and PEP8 fixing 0.3.2 - 2020-03-31 # Add qgis-plugin-ci configuration to the plugin Fix some scripts after moving lizsync directory Database Synchronization - Store automatic conflict resolution into table lizsync.conflicts Database synchronization - Resolve UPDATE conflicts by a given rule Synchronization - Some code refactoring Doc - Add docs folder for GitHub pages Remove UTF8 encoding in Python files Refactor code about loading Processing provider Move the plugin to its own folder Remove unused files 0.3.1 - 2020-03-20 # Tests - move and rename bash script to run_test.sh Config - Add list of schemas in saved configuration Package - Use parameterAsString for Additional SQL file input FTP & Database - Check connections before proceeding Synchronize db - remove unwanted parenthesis in simple SET clause Deploy package & tools - Quote zip archive file in psql/pg_dump command Upgrade - rename SQL file for upgrade to 0.3.0 0.3.0 - 2020-03-03 # Package & restore - Add an optional SQL file to run in clone after deploy Synchronization - Add new option to exclude columns from bidirectional database sync Doc - update README for SQL generator Update french translation 0.2.3 - 2020-02-28 # Send media to FTP server - Fix bug with missing variable Get projects from FTP - remove also Lizmap config file before sync Userland context - Use String input parameter for ZIP archive Provider - Userland context, only load useful algorithms FTP - Use LizSync.ini password if given instead of using ~/.netrc file Userland context - Adapt the method to connect to databases: read ini file Translation - update strings Deploy package - Check previous synchronizations before running this script Translation - Fix bug when loading provider and initializing locale Translation - Add French language Doc - Replace with line endings Translation - Add qgis-plugin-tools & Use Transifex Config - Add new option database_archive_file & improve config parser Fix some more bugs Add small doc about test data and scripts Fix small bug following last commit Config - Use ini configuration for all algorithm instead of QGIS global variables 0.2.2 - 2020-02-21 # Metadata - Change version to 0.2.2 FTP & adapt QGIS projects - Workaround for Userland context Install - Add needed function current_setting for PostgreSQL 9.5 Add default zip extension for package & deploy archive algs Improve tool function for replacing db data in QGIS projects Add missing help Use a tool method to return algorithm error Upgrade database structure - add help Synchronize media subfolder - add help Two-way database sync - Add help Send projects and files to clone FTP - Add help Package central db - add help Initialize central db - add help Tools - Add method to return error and terminate alg & use it in get_projects_and_files_from_central_ftp al Remove useless get_data_as_layer alg Remove useless execute_sql alg Deploy server package - Add help & remove duplicated parameter","title":"CHANGELOG"},{"location":"CHANGELOG/#changelog","text":"","title":"CHANGELOG"},{"location":"CHANGELOG/#045-2020-09-18","text":"Prepare the central database - Allow to not add automatically the audit triggers Create a package - Do not block the creation if some tables of the synchronized schemas are not audited. Deploy a package - Apply the audit triggers only on tables audited in the central database Deploy a package - Add a checkbox to force the re-creation of the clone server ID in the metadata table (useful to start fresh) Add unit tests for database synchronization with scenarios Autodocumentation of the algorithms https://docs.3liz.org/qgis-lizsync-plugin/processing/","title":"0.4.5 - 2020-09-18"},{"location":"CHANGELOG/#044-2020-06-08","text":"Interface - Dock: simplify button labels & add tooltips Documentation - Publish database schema & user manual (in French): https://docs.3liz.org/qgis-lizsync-plugin Continuous integration - improve CI scripts","title":"0.4.4 - 2020-06-08"},{"location":"CHANGELOG/#043-2020-05-31","text":"Tools - pg_dump: detect pg_dump error Synchronize database - Fix bug in SQL function","title":"0.4.3 - 2020-05-31"},{"location":"CHANGELOG/#042-2020-05-29","text":"Add more translations into French","title":"0.4.2 - 2020-05-29"},{"location":"CHANGELOG/#041-2020-05-08","text":"Database function - Improve speed of lizsync.synchronize() & add PostgreSQL notices Update translations","title":"0.4.1 - 2020-05-08"},{"location":"CHANGELOG/#040-2020-05-27","text":"Synchronization - Move all logic from Python to PostgreSQL functions Remove configure plugin algorithm: last used values are now saved by each algorithm Create structure - Hide override parameters to avoid data loss PostgreSQL - Get password from pgpass file if not found elsewhere Install - Add missing upgrade script to 0.3.2 & fix test Tests - Update docker-compose project, add schemaspy, add test migration Improve script run_test.sh","title":"0.4.0 - 2020-05-27"},{"location":"CHANGELOG/#036-2020-05-18","text":"Send project to clone - parameters: add password and remove clone connection Get projects from FTP - Hardcode geopoppy db params && use fileinput to get rid of bug Get projects from FTP - Add password and option to adapt project for geopoppy Test data - fix encoding for subdistricts layer Database sync - Move conflict storing into a function Update python version in github action Check flake 8 on github","title":"0.3.6 - 2020-05-18"},{"location":"CHANGELOG/#035-2020-05-01","text":"Bidirectionnal synchronization - Make sure to truncate clone audit log, even for rejected actions Tools - Get password: if no service is given, try to get password also from PGPASSWORD environment variable Run migrations on CI since 0.2.2 Disable pushing to transifex from PR Improve travis Switch to 3liz bot for CI","title":"0.3.5 - 2020-05-01"},{"location":"CHANGELOG/#034-2020-04-16","text":"Database synchro - Correctly update central audit.logged_actions for discarded UPDATEs Add missing flag for processing provider in metadata.txt Minor code cleanup Fix travis path when pushing QM to github Update translations from Transifex","title":"0.3.4 - 2020-04-16"},{"location":"CHANGELOG/#033-2020-04-09","text":"Synchronize media subfolder - Fix bug with localdir variable not set PostgreSQL connection - Get password from ini file if not given Improve continuous integration: translations, tests Code cleaning and PEP8 fixing","title":"0.3.3 - 2020-04-09"},{"location":"CHANGELOG/#032-2020-03-31","text":"Add qgis-plugin-ci configuration to the plugin Fix some scripts after moving lizsync directory Database Synchronization - Store automatic conflict resolution into table lizsync.conflicts Database synchronization - Resolve UPDATE conflicts by a given rule Synchronization - Some code refactoring Doc - Add docs folder for GitHub pages Remove UTF8 encoding in Python files Refactor code about loading Processing provider Move the plugin to its own folder Remove unused files","title":"0.3.2 - 2020-03-31"},{"location":"CHANGELOG/#031-2020-03-20","text":"Tests - move and rename bash script to run_test.sh Config - Add list of schemas in saved configuration Package - Use parameterAsString for Additional SQL file input FTP & Database - Check connections before proceeding Synchronize db - remove unwanted parenthesis in simple SET clause Deploy package & tools - Quote zip archive file in psql/pg_dump command Upgrade - rename SQL file for upgrade to 0.3.0","title":"0.3.1 - 2020-03-20"},{"location":"CHANGELOG/#030-2020-03-03","text":"Package & restore - Add an optional SQL file to run in clone after deploy Synchronization - Add new option to exclude columns from bidirectional database sync Doc - update README for SQL generator Update french translation","title":"0.3.0 - 2020-03-03"},{"location":"CHANGELOG/#023-2020-02-28","text":"Send media to FTP server - Fix bug with missing variable Get projects from FTP - remove also Lizmap config file before sync Userland context - Use String input parameter for ZIP archive Provider - Userland context, only load useful algorithms FTP - Use LizSync.ini password if given instead of using ~/.netrc file Userland context - Adapt the method to connect to databases: read ini file Translation - update strings Deploy package - Check previous synchronizations before running this script Translation - Fix bug when loading provider and initializing locale Translation - Add French language Doc - Replace with line endings Translation - Add qgis-plugin-tools & Use Transifex Config - Add new option database_archive_file & improve config parser Fix some more bugs Add small doc about test data and scripts Fix small bug following last commit Config - Use ini configuration for all algorithm instead of QGIS global variables","title":"0.2.3 - 2020-02-28"},{"location":"CHANGELOG/#022-2020-02-21","text":"Metadata - Change version to 0.2.2 FTP & adapt QGIS projects - Workaround for Userland context Install - Add needed function current_setting for PostgreSQL 9.5 Add default zip extension for package & deploy archive algs Improve tool function for replacing db data in QGIS projects Add missing help Use a tool method to return algorithm error Upgrade database structure - add help Synchronize media subfolder - add help Two-way database sync - Add help Send projects and files to clone FTP - Add help Package central db - add help Initialize central db - add help Tools - Add method to return error and terminate alg & use it in get_projects_and_files_from_central_ftp al Remove useless get_data_as_layer alg Remove useless execute_sql alg Deploy server package - Add help & remove duplicated parameter","title":"0.2.2 - 2020-02-21"},{"location":"CONTRIBUTING/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Database structure and Processing algorithms) generate the SQL files used for installing the structure in a PostgreSQL database. Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 4 pip install -r requirements-dev.txt flake8 make tests make test_migration On a new database, if you want to install the database by using migrations : 1 2 3 import os os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] = '0.2.2' # Enable del os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] # Disable Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements-doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc PostgreSQL database structure with SchemaSpy 1 make schemaspy","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"CONTRIBUTING/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Database structure and Processing algorithms) generate the SQL files used for installing the structure in a PostgreSQL database.","title":"Scripts"},{"location":"CONTRIBUTING/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"CONTRIBUTING/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 4 pip install -r requirements-dev.txt flake8 make tests make test_migration On a new database, if you want to install the database by using migrations : 1 2 3 import os os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] = '0.2.2' # Enable del os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] # Disable","title":"Code"},{"location":"CONTRIBUTING/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements-doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc PostgreSQL database structure with SchemaSpy 1 make schemaspy","title":"Documentation"},{"location":"changelog/","text":"CHANGELOG # 0.4.5 - 2020-09-18 # Prepare the central database - Allow to not add automatically the audit triggers Create a package - Do not block the creation if some tables of the synchronized schemas are not audited. Deploy a package - Apply the audit triggers only on tables audited in the central database Deploy a package - Add a checkbox to force the re-creation of the clone server ID in the metadata table (useful to start fresh) Add unit tests for database synchronization with scenarios Autodocumentation of the algorithms https://docs.3liz.org/qgis-lizsync-plugin/processing/ 0.4.4 - 2020-06-08 # Interface - Dock: simplify button labels & add tooltips Documentation - Publish database schema & user manual (in French): https://docs.3liz.org/qgis-lizsync-plugin Continuous integration - improve CI scripts 0.4.3 - 2020-05-31 # Tools - pg_dump: detect pg_dump error Synchronize database - Fix bug in SQL function 0.4.2 - 2020-05-29 # Add more translations into French 0.4.1 - 2020-05-08 # Database function - Improve speed of lizsync.synchronize() & add PostgreSQL notices Update translations 0.4.0 - 2020-05-27 # Synchronization - Move all logic from Python to PostgreSQL functions Remove configure plugin algorithm: last used values are now saved by each algorithm Create structure - Hide override parameters to avoid data loss PostgreSQL - Get password from pgpass file if not found elsewhere Install - Add missing upgrade script to 0.3.2 & fix test Tests - Update docker-compose project, add schemaspy, add test migration Improve script run_test.sh 0.3.6 - 2020-05-18 # Send project to clone - parameters: add password and remove clone connection Get projects from FTP - Hardcode geopoppy db params && use fileinput to get rid of bug Get projects from FTP - Add password and option to adapt project for geopoppy Test data - fix encoding for subdistricts layer Database sync - Move conflict storing into a function Update python version in github action Check flake 8 on github 0.3.5 - 2020-05-01 # Bidirectionnal synchronization - Make sure to truncate clone audit log, even for rejected actions Tools - Get password: if no service is given, try to get password also from PGPASSWORD environment variable Run migrations on CI since 0.2.2 Disable pushing to transifex from PR Improve travis Switch to 3liz bot for CI 0.3.4 - 2020-04-16 # Database synchro - Correctly update central audit.logged_actions for discarded UPDATEs Add missing flag for processing provider in metadata.txt Minor code cleanup Fix travis path when pushing QM to github Update translations from Transifex 0.3.3 - 2020-04-09 # Synchronize media subfolder - Fix bug with localdir variable not set PostgreSQL connection - Get password from ini file if not given Improve continuous integration: translations, tests Code cleaning and PEP8 fixing 0.3.2 - 2020-03-31 # Add qgis-plugin-ci configuration to the plugin Fix some scripts after moving lizsync directory Database Synchronization - Store automatic conflict resolution into table lizsync.conflicts Database synchronization - Resolve UPDATE conflicts by a given rule Synchronization - Some code refactoring Doc - Add docs folder for GitHub pages Remove UTF8 encoding in Python files Refactor code about loading Processing provider Move the plugin to its own folder Remove unused files 0.3.1 - 2020-03-20 # Tests - move and rename bash script to run_test.sh Config - Add list of schemas in saved configuration Package - Use parameterAsString for Additional SQL file input FTP & Database - Check connections before proceeding Synchronize db - remove unwanted parenthesis in simple SET clause Deploy package & tools - Quote zip archive file in psql/pg_dump command Upgrade - rename SQL file for upgrade to 0.3.0 0.3.0 - 2020-03-03 # Package & restore - Add an optional SQL file to run in clone after deploy Synchronization - Add new option to exclude columns from bidirectional database sync Doc - update README for SQL generator Update french translation 0.2.3 - 2020-02-28 # Send media to FTP server - Fix bug with missing variable Get projects from FTP - remove also Lizmap config file before sync Userland context - Use String input parameter for ZIP archive Provider - Userland context, only load useful algorithms FTP - Use LizSync.ini password if given instead of using ~/.netrc file Userland context - Adapt the method to connect to databases: read ini file Translation - update strings Deploy package - Check previous synchronizations before running this script Translation - Fix bug when loading provider and initializing locale Translation - Add French language Doc - Replace with line endings Translation - Add qgis-plugin-tools & Use Transifex Config - Add new option database_archive_file & improve config parser Fix some more bugs Add small doc about test data and scripts Fix small bug following last commit Config - Use ini configuration for all algorithm instead of QGIS global variables 0.2.2 - 2020-02-21 # Metadata - Change version to 0.2.2 FTP & adapt QGIS projects - Workaround for Userland context Install - Add needed function current_setting for PostgreSQL 9.5 Add default zip extension for package & deploy archive algs Improve tool function for replacing db data in QGIS projects Add missing help Use a tool method to return algorithm error Upgrade database structure - add help Synchronize media subfolder - add help Two-way database sync - Add help Send projects and files to clone FTP - Add help Package central db - add help Initialize central db - add help Tools - Add method to return error and terminate alg & use it in get_projects_and_files_from_central_ftp al Remove useless get_data_as_layer alg Remove useless execute_sql alg Deploy server package - Add help & remove duplicated parameter","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#045-2020-09-18","text":"Prepare the central database - Allow to not add automatically the audit triggers Create a package - Do not block the creation if some tables of the synchronized schemas are not audited. Deploy a package - Apply the audit triggers only on tables audited in the central database Deploy a package - Add a checkbox to force the re-creation of the clone server ID in the metadata table (useful to start fresh) Add unit tests for database synchronization with scenarios Autodocumentation of the algorithms https://docs.3liz.org/qgis-lizsync-plugin/processing/","title":"0.4.5 - 2020-09-18"},{"location":"changelog/#044-2020-06-08","text":"Interface - Dock: simplify button labels & add tooltips Documentation - Publish database schema & user manual (in French): https://docs.3liz.org/qgis-lizsync-plugin Continuous integration - improve CI scripts","title":"0.4.4 - 2020-06-08"},{"location":"changelog/#043-2020-05-31","text":"Tools - pg_dump: detect pg_dump error Synchronize database - Fix bug in SQL function","title":"0.4.3 - 2020-05-31"},{"location":"changelog/#042-2020-05-29","text":"Add more translations into French","title":"0.4.2 - 2020-05-29"},{"location":"changelog/#041-2020-05-08","text":"Database function - Improve speed of lizsync.synchronize() & add PostgreSQL notices Update translations","title":"0.4.1 - 2020-05-08"},{"location":"changelog/#040-2020-05-27","text":"Synchronization - Move all logic from Python to PostgreSQL functions Remove configure plugin algorithm: last used values are now saved by each algorithm Create structure - Hide override parameters to avoid data loss PostgreSQL - Get password from pgpass file if not found elsewhere Install - Add missing upgrade script to 0.3.2 & fix test Tests - Update docker-compose project, add schemaspy, add test migration Improve script run_test.sh","title":"0.4.0 - 2020-05-27"},{"location":"changelog/#036-2020-05-18","text":"Send project to clone - parameters: add password and remove clone connection Get projects from FTP - Hardcode geopoppy db params && use fileinput to get rid of bug Get projects from FTP - Add password and option to adapt project for geopoppy Test data - fix encoding for subdistricts layer Database sync - Move conflict storing into a function Update python version in github action Check flake 8 on github","title":"0.3.6 - 2020-05-18"},{"location":"changelog/#035-2020-05-01","text":"Bidirectionnal synchronization - Make sure to truncate clone audit log, even for rejected actions Tools - Get password: if no service is given, try to get password also from PGPASSWORD environment variable Run migrations on CI since 0.2.2 Disable pushing to transifex from PR Improve travis Switch to 3liz bot for CI","title":"0.3.5 - 2020-05-01"},{"location":"changelog/#034-2020-04-16","text":"Database synchro - Correctly update central audit.logged_actions for discarded UPDATEs Add missing flag for processing provider in metadata.txt Minor code cleanup Fix travis path when pushing QM to github Update translations from Transifex","title":"0.3.4 - 2020-04-16"},{"location":"changelog/#033-2020-04-09","text":"Synchronize media subfolder - Fix bug with localdir variable not set PostgreSQL connection - Get password from ini file if not given Improve continuous integration: translations, tests Code cleaning and PEP8 fixing","title":"0.3.3 - 2020-04-09"},{"location":"changelog/#032-2020-03-31","text":"Add qgis-plugin-ci configuration to the plugin Fix some scripts after moving lizsync directory Database Synchronization - Store automatic conflict resolution into table lizsync.conflicts Database synchronization - Resolve UPDATE conflicts by a given rule Synchronization - Some code refactoring Doc - Add docs folder for GitHub pages Remove UTF8 encoding in Python files Refactor code about loading Processing provider Move the plugin to its own folder Remove unused files","title":"0.3.2 - 2020-03-31"},{"location":"changelog/#031-2020-03-20","text":"Tests - move and rename bash script to run_test.sh Config - Add list of schemas in saved configuration Package - Use parameterAsString for Additional SQL file input FTP & Database - Check connections before proceeding Synchronize db - remove unwanted parenthesis in simple SET clause Deploy package & tools - Quote zip archive file in psql/pg_dump command Upgrade - rename SQL file for upgrade to 0.3.0","title":"0.3.1 - 2020-03-20"},{"location":"changelog/#030-2020-03-03","text":"Package & restore - Add an optional SQL file to run in clone after deploy Synchronization - Add new option to exclude columns from bidirectional database sync Doc - update README for SQL generator Update french translation","title":"0.3.0 - 2020-03-03"},{"location":"changelog/#023-2020-02-28","text":"Send media to FTP server - Fix bug with missing variable Get projects from FTP - remove also Lizmap config file before sync Userland context - Use String input parameter for ZIP archive Provider - Userland context, only load useful algorithms FTP - Use LizSync.ini password if given instead of using ~/.netrc file Userland context - Adapt the method to connect to databases: read ini file Translation - update strings Deploy package - Check previous synchronizations before running this script Translation - Fix bug when loading provider and initializing locale Translation - Add French language Doc - Replace with line endings Translation - Add qgis-plugin-tools & Use Transifex Config - Add new option database_archive_file & improve config parser Fix some more bugs Add small doc about test data and scripts Fix small bug following last commit Config - Use ini configuration for all algorithm instead of QGIS global variables","title":"0.2.3 - 2020-02-28"},{"location":"changelog/#022-2020-02-21","text":"Metadata - Change version to 0.2.2 FTP & adapt QGIS projects - Workaround for Userland context Install - Add needed function current_setting for PostgreSQL 9.5 Add default zip extension for package & deploy archive algs Improve tool function for replacing db data in QGIS projects Add missing help Use a tool method to return algorithm error Upgrade database structure - add help Synchronize media subfolder - add help Two-way database sync - Add help Send projects and files to clone FTP - Add help Package central db - add help Initialize central db - add help Tools - Add method to return error and terminate alg & use it in get_projects_and_files_from_central_ftp al Remove useless get_data_as_layer alg Remove useless execute_sql alg Deploy server package - Add help & remove duplicated parameter","title":"0.2.2 - 2020-02-21"},{"location":"contributing/","text":"Contributing # This project is hosted on GitHub. Visit GitHub Scripts # We provide a Makefile which helps the developers to: run tests, build the documentation (Database structure and Processing algorithms) generate the SQL files used for installing the structure in a PostgreSQL database. Translation # The UI is available on Transifex , no development knowledge is required. Code # SQL and Python are covered by unittests with Docker. 1 2 3 4 pip install -r requirements-dev.txt flake8 make tests make test_migration On a new database, if you want to install the database by using migrations : 1 2 3 import os os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] = '0.2.2' # Enable del os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] # Disable Documentation # The documentation is using MkDocs with Material : 1 2 pip install -r requirements-doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc PostgreSQL database structure with SchemaSpy 1 make schemaspy","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is hosted on GitHub. Visit GitHub","title":"Contributing"},{"location":"contributing/#scripts","text":"We provide a Makefile which helps the developers to: run tests, build the documentation (Database structure and Processing algorithms) generate the SQL files used for installing the structure in a PostgreSQL database.","title":"Scripts"},{"location":"contributing/#translation","text":"The UI is available on Transifex , no development knowledge is required.","title":"Translation"},{"location":"contributing/#code","text":"SQL and Python are covered by unittests with Docker. 1 2 3 4 pip install -r requirements-dev.txt flake8 make tests make test_migration On a new database, if you want to install the database by using migrations : 1 2 3 import os os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] = '0.2.2' # Enable del os . environ [ 'TEST_DATABASE_INSTALL_LIZSYNC' ] # Disable","title":"Code"},{"location":"contributing/#documentation","text":"The documentation is using MkDocs with Material : 1 2 pip install -r requirements-doc.txt mkdocs serve Processing algorithms documentation can be generated with: 1 make processing-doc PostgreSQL database structure with SchemaSpy 1 make schemaspy","title":"Documentation"},{"location":"references/","text":"References # Tutorials # Database structure, preparation, create and deploy ZIP archive Data editing and 2-way synchronisation Presentations # QGIS Swiss day in English Funders # Valabre : https://www.valabre.com/ Permagro : https://permagro.odoo.com/","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#tutorials","text":"Database structure, preparation, create and deploy ZIP archive Data editing and 2-way synchronisation","title":"Tutorials"},{"location":"references/#presentations","text":"QGIS Swiss day in English","title":"Presentations"},{"location":"references/#funders","text":"Valabre : https://www.valabre.com/ Permagro : https://permagro.odoo.com/","title":"Funders"},{"location":"concepts/","text":"Presentation # LizSync is a set of tools allowing to perform PostgreSQL database synchronisation between a central database and one or many clone databases. Two-way synchronisation is done: for data of tables in chosen schemas, between tables having the same structure . No synchronisation is made on structure changes (adding a column, creating or droping tables, etc.). LizSync workflow # For the 1st time install the needed PostgreSQL structure in the central database prepare the central database : add an uid column to every synchronized table add needed audit triggers Before each campain / when structure has changed create an archive from the central database with data from chosen schemas deploy it to one or many clones Whenever needed perform a two-way synchronisation from the clone There is only one central database but you can have one or many clone databases. PostgreSQL structure # LizSync uses 2 dedicated schemas : audit in charge of recording every actions made on tables: inserts, updates and deletes. It is a slightly modified version of the audit trigger tool lizsync stores information on central and clones databases (uid), manages the sync actions, maintain an history of synchronisations Auditing changes # LizSync uses a modified version of the audit trigger tool to monitor the changes made in the central and clone databases. The audit tool stores data in two tables : audit.logged_relations : the list of audited tables and their primary key(s) audit.logged_actions : the logs of every data modification made on the audited tables Each insert, update or delete triggers the addition of a new line in the audit.logged_actions table, with information about the time of the change, author, type of action, etc. We added a new column audit.sync_data to the table audit.logged_actions needed by the synchronisation. It contains the unique ID of the origin database, and the synchronisation item key. We modified the trigger to fill in this new JSON column. Demo # Read the reference page for some videos. Key features # Two-way sync : clone 1 <-> central <-> clone B <-> central <-> clone C <-> central Field granularity : SQL Queries replay only needed changes Manage conflicts : last date of edition wins (last person in the field) SQL based : run from any clone DB 1 SELECT lizsync . synchronize () Processing algs : can be run in CLI if needed Unit tests : installation/upgrade/synchronisation","title":"Concepts"},{"location":"concepts/#presentation","text":"LizSync is a set of tools allowing to perform PostgreSQL database synchronisation between a central database and one or many clone databases. Two-way synchronisation is done: for data of tables in chosen schemas, between tables having the same structure . No synchronisation is made on structure changes (adding a column, creating or droping tables, etc.).","title":"Presentation"},{"location":"concepts/#lizsync-workflow","text":"For the 1st time install the needed PostgreSQL structure in the central database prepare the central database : add an uid column to every synchronized table add needed audit triggers Before each campain / when structure has changed create an archive from the central database with data from chosen schemas deploy it to one or many clones Whenever needed perform a two-way synchronisation from the clone There is only one central database but you can have one or many clone databases.","title":"LizSync workflow"},{"location":"concepts/#postgresql-structure","text":"LizSync uses 2 dedicated schemas : audit in charge of recording every actions made on tables: inserts, updates and deletes. It is a slightly modified version of the audit trigger tool lizsync stores information on central and clones databases (uid), manages the sync actions, maintain an history of synchronisations","title":"PostgreSQL structure"},{"location":"concepts/#auditing-changes","text":"LizSync uses a modified version of the audit trigger tool to monitor the changes made in the central and clone databases. The audit tool stores data in two tables : audit.logged_relations : the list of audited tables and their primary key(s) audit.logged_actions : the logs of every data modification made on the audited tables Each insert, update or delete triggers the addition of a new line in the audit.logged_actions table, with information about the time of the change, author, type of action, etc. We added a new column audit.sync_data to the table audit.logged_actions needed by the synchronisation. It contains the unique ID of the origin database, and the synchronisation item key. We modified the trigger to fill in this new JSON column.","title":"Auditing changes"},{"location":"concepts/#demo","text":"Read the reference page for some videos.","title":"Demo"},{"location":"concepts/#key-features","text":"Two-way sync : clone 1 <-> central <-> clone B <-> central <-> clone C <-> central Field granularity : SQL Queries replay only needed changes Manage conflicts : last date of edition wins (last person in the field) SQL based : run from any clone DB 1 SELECT lizsync . synchronize () Processing algs : can be run in CLI if needed Unit tests : installation/upgrade/synchronisation","title":"Key features"},{"location":"old_french_documentation/","text":"Ancienne documentation en fran\u00e7ais : Plugin LizSync GeoPoppy Android","title":"French doc"},{"location":"old_french_documentation/geopoppy-android/","text":"Installation et lancement du GeoPoppy sur tablette Android # Introduction # Ce document pr\u00e9sente comment utiliser l'application UserLand pour installer et lancer l'outil GeoPoppy sur la tablette ou t\u00e9l\u00e9phone Android . Les applications du GeoPoppy # L'application principale qui sera utilis\u00e9e pour visualiser les cartes et saisir des donn\u00e9es sur le terrain est l' application Lizmap . Elle est consultable via un navigateur web . Nous conseillons vivement Firefox pour Android. Si vous \u00eates g\u00e9omaticien, vous pourrez aussi utiliser les autres services disponibles pour consulter les donn\u00e9es, modifier les configurations, car le GeoPoppy embarque aussi: un serveur de base de donn\u00e9es PostgreSQL un serveur FTP pour naviguer dans les r\u00e9pertoires poser des fichiers sur le GeoPoppy un serveur QGIS pour proposer des cartes et des donn\u00e9es spatiales. Le GeoPoppy est l'\u00e9quivalent d'un mini-serveur embarqu\u00e9 sur la tablette. Pour pouvoir utiliser les diff\u00e9rents services depuis son ordinateur, il faut que les deux appareils soient connect\u00e9s sur le m\u00eame r\u00e9seau WIFI . Installation # GeoPoppy peut \u00eatre utilis\u00e9 sur tablette ou smartphone fonctionnant sur syst\u00e8me d'exploitation Android. Il utilise le logiciel UserLand qui permet de charger des images contenant l'ensemble des logiciels n\u00e9cessaires. Installer le logiciel UserLand # Pour pouvoir continuer, connecter d'abord la tablette \u00e0 internet (via WIFI ou 3G), puis: Installer l'application UserLand depuis l'application Google Play Une fois install\u00e9e, lancer cette application. Elle affiche par d\u00e9faut 3 onglets: Applis Sessions Syst\u00e8mes de fichiers Dans l'onglet Applis , cliquer sur le bouton Rafra\u00eechir en haut \u00e0 droite, puis attendre la fin de l'op\u00e9ration. Ce logiciel UserLand peut utiliser des images pr\u00e9par\u00e9es \u00e0 l'avance. L' image GeoPoppy doit d'abord \u00eatre envoy\u00e9e sur la tablette depuis votre ordinateur (ou t\u00e9l\u00e9charg\u00e9e depuis internet si elle est disponible via une URL). Brancher la tablette \u00e0 l'ordinateur # Une fois la tablette branch\u00e9e par cable USB \u00e0 votre ordinateur, le message suivant doit s'afficher: Autoriser acc\u00e8s aux donn\u00e9es de la tablette ? L'appareil connect\u00e9 va pouvoir acc\u00e9der aux donn\u00e9es se trouvant sur cette tablette . Cliquer sur le bouton Autoriser , Ouvrir votre explorateur de fichiers sur votre ordinateur Trouver le disque de votre tablette puis naviguer dans le dossier de t\u00e9l\u00e9chargement: Tablet / Download Y copier le fichier image qui vous a \u00e9t\u00e9 fourni, par exemple le fichier geopoppy32-debian-rootfs.tar.gz Une fois le fichier d'image compress\u00e9e charg\u00e9 sur votre tablette, vous pouvez retourner sur la tablette pour installer cette image dans UserLand. Charger l'image dans UserLand # Nous allons d'abord cr\u00e9er un syst\u00e8me de fichiers \u00e0 partir de cette image, via le logiciel UserLand: Ouvrir le logiciel UserLand Aller dans le 3\u00e8me onglet Syst\u00e8mes de fichiers Cliquer sur le bouton + en haut \u00e0 droit pour cr\u00e9er un nouvel item. Un formulaire s'affiche, renseigner: Nom du syst\u00e8me de fichiers: GeoPoppy (libre) Nom d'utilisateur: geopoppy (en minuscules) Mot de passe: geopoppy (en minuscules) Mot de passe pour VNC: geopoppy (en minuscules) Syst\u00e8me de fichiers: Debian Cliquer sur Show advanced options puis sur le bouton SELECT BACKUP FILE TO IMPORT et s\u00e9lectionner dans votre dossier T\u00e9l\u00e9chargement l'image GeoPoppy, par exemple geopoppy32-debian-rootfs.tar.gz Valider avec l' ic\u00f4ne disquette en haut \u00e0 droite Une fois le syst\u00e8me de fichier cr\u00e9\u00e9, nous pouvons cr\u00e9er une nouvelle session \u00e0 partir de ce syst\u00e8me: Ouvrir l'application UserLand si besoin Aller dans le 2\u00e8me onglet Sessions Cliquer sur le bouton + en haut \u00e0 droit pour cr\u00e9er un nouvel item. Un formulaire s'affiche, renseigner: Nom de la session: GeoPoppy (libre) Syst\u00e8me de fichier: choisir le syst\u00e8me pr\u00e9c\u00e9demment cr\u00e9\u00e9, par exemple GeoPoppy: Debian Type de service: SSH Nom d'utilisateur: geopoppy Valider avec l' ic\u00f4ne disquette en haut \u00e0 droite Une fois ces 2 \u00e9tapes accomplies, nous allons pouvoir lancer l'application GeoPoppy depuis le logiciel UserLand Lancement de l'application GeoPoppy # Maintenant que l'image du GeoPoppy a bien \u00e9t\u00e9 charg\u00e9e dans l'application UserLand, nous allons pouvoir l'utiliser. Dans un premier temps, v\u00e9rifier que vous \u00eates bien connect\u00e9 en WIFI sur le m\u00eame r\u00e9seau que votre ordinateur, puis proc\u00e9der ainsi: Ouvrir si besoin le logiciel UserLand Aller sur le 2\u00e8me onglet Sessions Cliquer sur le nom de la session cr\u00e9\u00e9e pr\u00e9c\u00e9demment, par exemple GeoPoppy Une nouvelle fen\u00eatre noire s'affiche (un terminal ou invite de commande), et vous demande votre mot de passe . Renseigner avec le clavier Android le mot de passe geopoppy (en minuscules). Le mot tap\u00e9 ne s'affiche pas, ni aucune \u00e9toile, mais c'est normal. Une fois le mot de passe tap\u00e9, valider avec la touche Entr\u00e9e ou Suivant du clavier Android. Une s\u00e9rie de commandes doit s'afficher, qui d\u00e9crit le lancement des services: postgres : serveur de base de donn\u00e9es PostgreSQL, pour stocker les donn\u00e9es nginx : serveur Web, pour afficher l'application Lizmap redis : base de donn\u00e9es de cache, pour stocker les sessions php : environnement de script PHP, pour faire fonctionner Lizmap ftpd : serveur FTP, pour envoyer des fichiers sur la tablette supervisor : outil charg\u00e9 de lancer le serveur cartographique QGIS Server Un message final GEOPOPPY IP ADDRESS affiche l' adresse IP de la tablette, qui pourra \u00eatre utilis\u00e9 pour se connecter depuis l'ordinateur aux diff\u00e9rents services (PostgreSQL, FTP) Une fois ces services charg\u00e9s, vous pouvez r\u00e9duire la fen\u00eatre de UserLand , mais surtout pas la fermer. Utilisation # Pour lancer l'application Lizmap sur la tablette, il faut d'abord ouvrir un navigateur Web . Nous conseillons Chrome ou Firefox pour Android . Ensuite, vous pouvez ouvrir l'URL https://localhost:2080/lizmap/index.php Attention, ne pas oublier le s apr\u00e8s http. Une fois la page charg\u00e9e, un message d'erreur est pr\u00e9sent\u00e9. C'est d\u00fb au certificat utilis\u00e9 pour le HTTPS, pour lequel il est n\u00e9cessaire d' ajouter une exception . Par exemple sous Chrome: A l'arriv\u00e9e de la page: Cliquer sur Param\u00e8tres avanc\u00e9s puis cliquer sur le lien Continuer vers le site localhost (dangereux) Vous arriverez alors \u00e0 la page d'accueil de Lizmap. qui est vide. Il faut vous connecter via le bouton Connexion de la barre en haut \u00e0 droite, puis utiliser vos identifiants OpenDFCI dans le formulaire affich\u00e9: Une fois connect\u00e9, vous acc\u00e9dez \u00e0 la page d'accueil , qui montre les cartes disponibles: Pour voir une carte, il faut cliquer (taper) sur une des imagettes, par exemple Espace de coproduction dans la copie d'\u00e9cran ci-dessus. Vous arrivez alors \u00e0 la carte choisie. Menu GeoPoppy # Dans la barre de menu de gauche, vous pouvez acc\u00e9der au menu GeoPoppy via l'ic\u00f4ne avec les doubles-fl\u00e8ches qui tournent. Ce menu ouvre un panneau \u00e0 gauche de la carte (ou en plein \u00e9cran en mode portrait), qui propose les actions suivantes: Test connection Ce bouton tester la connection vers la base de donn\u00e9es centrale, pour savoir si on peut ensuite lancer la synchronisation entre la base de donn\u00e9es du clone et la base centrale Synchronize database Lance la synchronisation bidirectionnelle entre la base de donn\u00e9es locale de la tablette et la base de donn\u00e9es centrale. Les modifications du serveur central sont appliqu\u00e9es sur la base de la tablette, puis les modifications r\u00e9alis\u00e9es sur la tablette sont pouss\u00e9es sur le serveur central. Synchronize media Ce bouton permet d'envoyer les photos enregistr\u00e9es sur la tablette lors de l'utilisation des formulaires d'\u00e9dition de la carte. Ces photos sont envoy\u00e9es sur le serveur FTP central. Fullscreen Ce bouton permet de passer la carte en mode plein-\u00e9cran, ou de revenir au mode classique. Pour pouvoir fonctionner, toutes les actions, sauf Fullscreen , ont besoin d'avoir une connexion internet, pour pouvoir dialoguer avec le serveur central (base PostgreSQL ou serveur FTP). V\u00e9rifier que votre connexion est stable avant de lancer les synchronisations. Trucs et astuce UserLand et GeoPoppy # UserLand peut \u00eatre consid\u00e9r\u00e9 comme le moteur de GeoPoppy . Voici quelques manipulations \u00e0 effectuer si vous rencontrez des soucis de fonctionnement. Utilisation du GPS # Veillez \u00e0 bien lancer le GPS de votre tablette avant de lancer le navigateur et de charger la page de la carte Lizmap. Ouvrir le navigateur et charger la carte Lizmap Dans le menu de gauche, cliquer sur le bouton avec un disque dans un cercle Un message s'affiche \u00e0 l'\u00e9cran, vous demandant la permission d'utiliser le positionnement: autoriser. Apr\u00e8s quelques secondes, la carte doit \u00eatre recentr\u00e9e sur votre position Pour d\u00e9sactiver le positionnement automatique , vous pouvez fermer le menu ou cliquer sur le bouton Arr\u00eater Relancer l'application Lizmap # Dans votre navigateur, si votre session a expir\u00e9, ou si vous souhaitez relancer la carte, vous pouvez cliquer sur la fl\u00e8che qui tourne situ\u00e9e \u00e0 c\u00f4t\u00e9 du champ avec l'adresse. Cela permet de recharger compl\u00e8tement la carte. Red\u00e9marrage des services du GeoPoppy # Lorsque vous avez lanc\u00e9 le GeoPoppy, vous avez tap\u00e9 votre mot de passe, puis laiss\u00e9 ouvert l'invite de commande (interface avec un fond noir): voir le chapitre pr\u00e9c\u00e9dent sur le d\u00e9marrage du GeoPoppy. Pour red\u00e9marrer les service du GeoPoppy sans arr\u00eater la machine virtuelle UserLand, vous pouvez encha\u00eener les op\u00e9rations suivantes: Dans l'invite de commande, taper le mot exit puis valider avec le bouton Entr\u00e9e (ou Aller \u00e0 ) du clavier. Cela ferme l'invite de commande Dans UserLand, dans le 2\u00e8me onglet Sessions , taper sur le nom de votre session GeoPoppy , cela r\u00e9ouvre l'invite de commande, et vous demander le mot de passe geopoppy . Une fois le mot de passe valid\u00e9, les services sont tous red\u00e9marr\u00e9s (comme lors d'un d\u00e9marrage normal). Red\u00e9marrage complet du GeoPoppy # Si vous souhaitez red\u00e9marrer l' ensemble UserLand et GeoPoppy de mani\u00e8re compl\u00e8te, vous pouvez suivre les \u00e9tapes suivantes: Dans l'invite de commande, taper le mot exit puis valider: cela ferme l'invite de commande Dans UserLand, dans le 2\u00e8me onglet Sessions , appuyer longtemps sur le nom de la session, puis s\u00e9lectionner Tuer le service Dans le 1er onglet Applis , appuyer longtemps sur Debian , puis s\u00e9lectionner Arr\u00eater l'appli Fermer UserLand en cliquant sur le bouton syst\u00e8me pour afficher toutes les applications, puis la croix Pour relancer les services , faire comme le d\u00e9marrage: lancer UserLand, aller dans le 2\u00e8me onglet et appuyer sur la session GeoPoppy, puis \u00e0 l'invite de commande, taper le mot de passe geopoppy puis attendre le d\u00e9marrage des services.","title":"Installation et lancement du GeoPoppy sur tablette Android"},{"location":"old_french_documentation/geopoppy-android/#installation-et-lancement-du-geopoppy-sur-tablette-android","text":"","title":"Installation et lancement du GeoPoppy sur tablette Android"},{"location":"old_french_documentation/geopoppy-android/#introduction","text":"Ce document pr\u00e9sente comment utiliser l'application UserLand pour installer et lancer l'outil GeoPoppy sur la tablette ou t\u00e9l\u00e9phone Android .","title":"Introduction"},{"location":"old_french_documentation/geopoppy-android/#les-applications-du-geopoppy","text":"L'application principale qui sera utilis\u00e9e pour visualiser les cartes et saisir des donn\u00e9es sur le terrain est l' application Lizmap . Elle est consultable via un navigateur web . Nous conseillons vivement Firefox pour Android. Si vous \u00eates g\u00e9omaticien, vous pourrez aussi utiliser les autres services disponibles pour consulter les donn\u00e9es, modifier les configurations, car le GeoPoppy embarque aussi: un serveur de base de donn\u00e9es PostgreSQL un serveur FTP pour naviguer dans les r\u00e9pertoires poser des fichiers sur le GeoPoppy un serveur QGIS pour proposer des cartes et des donn\u00e9es spatiales. Le GeoPoppy est l'\u00e9quivalent d'un mini-serveur embarqu\u00e9 sur la tablette. Pour pouvoir utiliser les diff\u00e9rents services depuis son ordinateur, il faut que les deux appareils soient connect\u00e9s sur le m\u00eame r\u00e9seau WIFI .","title":"Les applications du GeoPoppy"},{"location":"old_french_documentation/geopoppy-android/#installation","text":"GeoPoppy peut \u00eatre utilis\u00e9 sur tablette ou smartphone fonctionnant sur syst\u00e8me d'exploitation Android. Il utilise le logiciel UserLand qui permet de charger des images contenant l'ensemble des logiciels n\u00e9cessaires.","title":"Installation"},{"location":"old_french_documentation/geopoppy-android/#installer-le-logiciel-userland","text":"Pour pouvoir continuer, connecter d'abord la tablette \u00e0 internet (via WIFI ou 3G), puis: Installer l'application UserLand depuis l'application Google Play Une fois install\u00e9e, lancer cette application. Elle affiche par d\u00e9faut 3 onglets: Applis Sessions Syst\u00e8mes de fichiers Dans l'onglet Applis , cliquer sur le bouton Rafra\u00eechir en haut \u00e0 droite, puis attendre la fin de l'op\u00e9ration. Ce logiciel UserLand peut utiliser des images pr\u00e9par\u00e9es \u00e0 l'avance. L' image GeoPoppy doit d'abord \u00eatre envoy\u00e9e sur la tablette depuis votre ordinateur (ou t\u00e9l\u00e9charg\u00e9e depuis internet si elle est disponible via une URL).","title":"Installer le logiciel UserLand"},{"location":"old_french_documentation/geopoppy-android/#brancher-la-tablette-a-lordinateur","text":"Une fois la tablette branch\u00e9e par cable USB \u00e0 votre ordinateur, le message suivant doit s'afficher: Autoriser acc\u00e8s aux donn\u00e9es de la tablette ? L'appareil connect\u00e9 va pouvoir acc\u00e9der aux donn\u00e9es se trouvant sur cette tablette . Cliquer sur le bouton Autoriser , Ouvrir votre explorateur de fichiers sur votre ordinateur Trouver le disque de votre tablette puis naviguer dans le dossier de t\u00e9l\u00e9chargement: Tablet / Download Y copier le fichier image qui vous a \u00e9t\u00e9 fourni, par exemple le fichier geopoppy32-debian-rootfs.tar.gz Une fois le fichier d'image compress\u00e9e charg\u00e9 sur votre tablette, vous pouvez retourner sur la tablette pour installer cette image dans UserLand.","title":"Brancher la tablette \u00e0 l'ordinateur"},{"location":"old_french_documentation/geopoppy-android/#charger-limage-dans-userland","text":"Nous allons d'abord cr\u00e9er un syst\u00e8me de fichiers \u00e0 partir de cette image, via le logiciel UserLand: Ouvrir le logiciel UserLand Aller dans le 3\u00e8me onglet Syst\u00e8mes de fichiers Cliquer sur le bouton + en haut \u00e0 droit pour cr\u00e9er un nouvel item. Un formulaire s'affiche, renseigner: Nom du syst\u00e8me de fichiers: GeoPoppy (libre) Nom d'utilisateur: geopoppy (en minuscules) Mot de passe: geopoppy (en minuscules) Mot de passe pour VNC: geopoppy (en minuscules) Syst\u00e8me de fichiers: Debian Cliquer sur Show advanced options puis sur le bouton SELECT BACKUP FILE TO IMPORT et s\u00e9lectionner dans votre dossier T\u00e9l\u00e9chargement l'image GeoPoppy, par exemple geopoppy32-debian-rootfs.tar.gz Valider avec l' ic\u00f4ne disquette en haut \u00e0 droite Une fois le syst\u00e8me de fichier cr\u00e9\u00e9, nous pouvons cr\u00e9er une nouvelle session \u00e0 partir de ce syst\u00e8me: Ouvrir l'application UserLand si besoin Aller dans le 2\u00e8me onglet Sessions Cliquer sur le bouton + en haut \u00e0 droit pour cr\u00e9er un nouvel item. Un formulaire s'affiche, renseigner: Nom de la session: GeoPoppy (libre) Syst\u00e8me de fichier: choisir le syst\u00e8me pr\u00e9c\u00e9demment cr\u00e9\u00e9, par exemple GeoPoppy: Debian Type de service: SSH Nom d'utilisateur: geopoppy Valider avec l' ic\u00f4ne disquette en haut \u00e0 droite Une fois ces 2 \u00e9tapes accomplies, nous allons pouvoir lancer l'application GeoPoppy depuis le logiciel UserLand","title":"Charger l'image dans UserLand"},{"location":"old_french_documentation/geopoppy-android/#lancement-de-lapplication-geopoppy","text":"Maintenant que l'image du GeoPoppy a bien \u00e9t\u00e9 charg\u00e9e dans l'application UserLand, nous allons pouvoir l'utiliser. Dans un premier temps, v\u00e9rifier que vous \u00eates bien connect\u00e9 en WIFI sur le m\u00eame r\u00e9seau que votre ordinateur, puis proc\u00e9der ainsi: Ouvrir si besoin le logiciel UserLand Aller sur le 2\u00e8me onglet Sessions Cliquer sur le nom de la session cr\u00e9\u00e9e pr\u00e9c\u00e9demment, par exemple GeoPoppy Une nouvelle fen\u00eatre noire s'affiche (un terminal ou invite de commande), et vous demande votre mot de passe . Renseigner avec le clavier Android le mot de passe geopoppy (en minuscules). Le mot tap\u00e9 ne s'affiche pas, ni aucune \u00e9toile, mais c'est normal. Une fois le mot de passe tap\u00e9, valider avec la touche Entr\u00e9e ou Suivant du clavier Android. Une s\u00e9rie de commandes doit s'afficher, qui d\u00e9crit le lancement des services: postgres : serveur de base de donn\u00e9es PostgreSQL, pour stocker les donn\u00e9es nginx : serveur Web, pour afficher l'application Lizmap redis : base de donn\u00e9es de cache, pour stocker les sessions php : environnement de script PHP, pour faire fonctionner Lizmap ftpd : serveur FTP, pour envoyer des fichiers sur la tablette supervisor : outil charg\u00e9 de lancer le serveur cartographique QGIS Server Un message final GEOPOPPY IP ADDRESS affiche l' adresse IP de la tablette, qui pourra \u00eatre utilis\u00e9 pour se connecter depuis l'ordinateur aux diff\u00e9rents services (PostgreSQL, FTP) Une fois ces services charg\u00e9s, vous pouvez r\u00e9duire la fen\u00eatre de UserLand , mais surtout pas la fermer.","title":"Lancement de l'application GeoPoppy"},{"location":"old_french_documentation/geopoppy-android/#utilisation","text":"Pour lancer l'application Lizmap sur la tablette, il faut d'abord ouvrir un navigateur Web . Nous conseillons Chrome ou Firefox pour Android . Ensuite, vous pouvez ouvrir l'URL https://localhost:2080/lizmap/index.php Attention, ne pas oublier le s apr\u00e8s http. Une fois la page charg\u00e9e, un message d'erreur est pr\u00e9sent\u00e9. C'est d\u00fb au certificat utilis\u00e9 pour le HTTPS, pour lequel il est n\u00e9cessaire d' ajouter une exception . Par exemple sous Chrome: A l'arriv\u00e9e de la page: Cliquer sur Param\u00e8tres avanc\u00e9s puis cliquer sur le lien Continuer vers le site localhost (dangereux) Vous arriverez alors \u00e0 la page d'accueil de Lizmap. qui est vide. Il faut vous connecter via le bouton Connexion de la barre en haut \u00e0 droite, puis utiliser vos identifiants OpenDFCI dans le formulaire affich\u00e9: Une fois connect\u00e9, vous acc\u00e9dez \u00e0 la page d'accueil , qui montre les cartes disponibles: Pour voir une carte, il faut cliquer (taper) sur une des imagettes, par exemple Espace de coproduction dans la copie d'\u00e9cran ci-dessus. Vous arrivez alors \u00e0 la carte choisie.","title":"Utilisation"},{"location":"old_french_documentation/geopoppy-android/#menu-geopoppy","text":"Dans la barre de menu de gauche, vous pouvez acc\u00e9der au menu GeoPoppy via l'ic\u00f4ne avec les doubles-fl\u00e8ches qui tournent. Ce menu ouvre un panneau \u00e0 gauche de la carte (ou en plein \u00e9cran en mode portrait), qui propose les actions suivantes: Test connection Ce bouton tester la connection vers la base de donn\u00e9es centrale, pour savoir si on peut ensuite lancer la synchronisation entre la base de donn\u00e9es du clone et la base centrale Synchronize database Lance la synchronisation bidirectionnelle entre la base de donn\u00e9es locale de la tablette et la base de donn\u00e9es centrale. Les modifications du serveur central sont appliqu\u00e9es sur la base de la tablette, puis les modifications r\u00e9alis\u00e9es sur la tablette sont pouss\u00e9es sur le serveur central. Synchronize media Ce bouton permet d'envoyer les photos enregistr\u00e9es sur la tablette lors de l'utilisation des formulaires d'\u00e9dition de la carte. Ces photos sont envoy\u00e9es sur le serveur FTP central. Fullscreen Ce bouton permet de passer la carte en mode plein-\u00e9cran, ou de revenir au mode classique. Pour pouvoir fonctionner, toutes les actions, sauf Fullscreen , ont besoin d'avoir une connexion internet, pour pouvoir dialoguer avec le serveur central (base PostgreSQL ou serveur FTP). V\u00e9rifier que votre connexion est stable avant de lancer les synchronisations.","title":"Menu GeoPoppy"},{"location":"old_french_documentation/geopoppy-android/#trucs-et-astuce-userland-et-geopoppy","text":"UserLand peut \u00eatre consid\u00e9r\u00e9 comme le moteur de GeoPoppy . Voici quelques manipulations \u00e0 effectuer si vous rencontrez des soucis de fonctionnement.","title":"Trucs et astuce UserLand et GeoPoppy"},{"location":"old_french_documentation/geopoppy-android/#utilisation-du-gps","text":"Veillez \u00e0 bien lancer le GPS de votre tablette avant de lancer le navigateur et de charger la page de la carte Lizmap. Ouvrir le navigateur et charger la carte Lizmap Dans le menu de gauche, cliquer sur le bouton avec un disque dans un cercle Un message s'affiche \u00e0 l'\u00e9cran, vous demandant la permission d'utiliser le positionnement: autoriser. Apr\u00e8s quelques secondes, la carte doit \u00eatre recentr\u00e9e sur votre position Pour d\u00e9sactiver le positionnement automatique , vous pouvez fermer le menu ou cliquer sur le bouton Arr\u00eater","title":"Utilisation du GPS"},{"location":"old_french_documentation/geopoppy-android/#relancer-lapplication-lizmap","text":"Dans votre navigateur, si votre session a expir\u00e9, ou si vous souhaitez relancer la carte, vous pouvez cliquer sur la fl\u00e8che qui tourne situ\u00e9e \u00e0 c\u00f4t\u00e9 du champ avec l'adresse. Cela permet de recharger compl\u00e8tement la carte.","title":"Relancer l'application Lizmap"},{"location":"old_french_documentation/geopoppy-android/#redemarrage-des-services-du-geopoppy","text":"Lorsque vous avez lanc\u00e9 le GeoPoppy, vous avez tap\u00e9 votre mot de passe, puis laiss\u00e9 ouvert l'invite de commande (interface avec un fond noir): voir le chapitre pr\u00e9c\u00e9dent sur le d\u00e9marrage du GeoPoppy. Pour red\u00e9marrer les service du GeoPoppy sans arr\u00eater la machine virtuelle UserLand, vous pouvez encha\u00eener les op\u00e9rations suivantes: Dans l'invite de commande, taper le mot exit puis valider avec le bouton Entr\u00e9e (ou Aller \u00e0 ) du clavier. Cela ferme l'invite de commande Dans UserLand, dans le 2\u00e8me onglet Sessions , taper sur le nom de votre session GeoPoppy , cela r\u00e9ouvre l'invite de commande, et vous demander le mot de passe geopoppy . Une fois le mot de passe valid\u00e9, les services sont tous red\u00e9marr\u00e9s (comme lors d'un d\u00e9marrage normal).","title":"Red\u00e9marrage des services du GeoPoppy"},{"location":"old_french_documentation/geopoppy-android/#redemarrage-complet-du-geopoppy","text":"Si vous souhaitez red\u00e9marrer l' ensemble UserLand et GeoPoppy de mani\u00e8re compl\u00e8te, vous pouvez suivre les \u00e9tapes suivantes: Dans l'invite de commande, taper le mot exit puis valider: cela ferme l'invite de commande Dans UserLand, dans le 2\u00e8me onglet Sessions , appuyer longtemps sur le nom de la session, puis s\u00e9lectionner Tuer le service Dans le 1er onglet Applis , appuyer longtemps sur Debian , puis s\u00e9lectionner Arr\u00eater l'appli Fermer UserLand en cliquant sur le bouton syst\u00e8me pour afficher toutes les applications, puis la croix Pour relancer les services , faire comme le d\u00e9marrage: lancer UserLand, aller dans le 2\u00e8me onglet et appuyer sur la session GeoPoppy, puis \u00e0 l'invite de commande, taper le mot de passe geopoppy puis attendre le d\u00e9marrage des services.","title":"Red\u00e9marrage complet du GeoPoppy"},{"location":"old_french_documentation/qgis-lizsync-plugin/","text":"Installation et utilisation de LizSync sur QGIS # Introduction # Ce document pr\u00e9sente l'outil LizSync qui permet de mettre en oeuvre la synchronisation entre une base de donn\u00e9es PostgreSQL centrale et une ou plusieurs bases de donn\u00e9es clone. LizSync permet le d\u00e9ploiement et la synchronisation des donn\u00e9es entre une unique base de donn\u00e9es centrale et un ou plusieurs clones: base de donn\u00e9es centrale : c'est la base de production qui contient l'ensemble des donn\u00e9es. base de donn\u00e9es clone : c'est une base install\u00e9e sur un ordinateur, une tablette ou un autre serveur. Elle contient un sous-ensemble des sch\u00e9mas de la base centrale Une extension LizSync pour QGIS permet de lancer les diff\u00e9rentes actions n\u00e9cessaires pour faire fonctionner cet outil: installation, pr\u00e9paration de la base centrale, cr\u00e9ation et d\u00e9ploiement d'archive, synchronisation. Sc\u00e9nario et concepts # Donn\u00e9es en base PostgreSQL # Une base PostgreSQL appel\u00e9e centrale contient un ensemble complet de donn\u00e9es, organis\u00e9es dans des sch\u00e9mas . Aucune donn\u00e9e n'est stock\u00e9e dans le sch\u00e9ma public . Avant de pouvoir utiliser LizSync , on doit d'abord l' installer sur la base centrale , afin d'ajouter les sch\u00e9mas, tables et fonctions qui permettent de g\u00e9rer la synchronisation. Toutes les donn\u00e9es relatives aux synchronisations seront stock\u00e9es dans le sch\u00e9ma lizsync . Les tables du sch\u00e9ma audit enregistreront les modifications r\u00e9alis\u00e9es sur les donn\u00e9es des autres sch\u00e9mas. Ensuite, il faut pr\u00e9parer cette base centrale , c'est-\u00e0-dire s'assurer que les tables \u00e0 synchroniser comportent les champs requis, notamment un identifiant unique (UUID), et que les modifications sur ces tables sont bien enregistr\u00e9es au fil de l'eau via l'outil d'audit de LizSync. Lorsque la base centrale est pr\u00eate, il est alors possible de cr\u00e9er une archive de donn\u00e9es pour un ou plusieurs sch\u00e9mas. Cette archive contient les donn\u00e9es des sch\u00e9mas, mais aussi les m\u00e9tadonn\u00e9es utiles de la base centrale (identifiant unique). La cr\u00e9ation de l'archive est vue pour LizSync comme une action de synchronisation , dite compl\u00e8te. Cette archive est ensuite charg\u00e9e vers la base clone (vers un ou plusieurs clones), ce qui supprime l'ensemble des donn\u00e9es du clone pour les sch\u00e9mas de l'archive, puis r\u00e9installe les outils LizSync sur le clone et enfin charge les donn\u00e9es. A l'issu de cette phase, les donn\u00e9es du clone pour les sch\u00e9mas choisis sont \u00e9quivalentes aux donn\u00e9es qui \u00e9taient pr\u00e9sentes lors de la cr\u00e9ation de l'archive. Les donn\u00e9es des bases centrales et clone peuvent alors \u00e9voluer librement en parall\u00e8le, tant que la structure n'est pas modifi\u00e9e (pas d'ajout de tables ou de champs). Par exemple via une saisie de donn\u00e9es terrain avec des tablettes sur les bases clones. Une synchronisation bidirectionnelle peut alors \u00eatre effectu\u00e9e pour r\u00e9cup\u00e9rer sur le clone les changements apparus sur la base centrale, puis envoyer sur la base centrale les modifications des donn\u00e9es du clone. Cartes Lizmap dans le contexte GeoPoppy # Pour pouvoir \u00e9diter les donn\u00e9es dans les bases PostgreSQL, il est possible d'utiliser n'importe quel logiciel: QGIS, QField, PgAdmin, des scripts SQL lanc\u00e9s manuellement, etc. L'outil Lizmap Web Client peut aussi \u00eatre utilis\u00e9 pour r\u00e9aliser ces \u00e9ditions: sur la base centrale , avec l'application Lizmap accessible en ligne sur les bases clone embarqu\u00e9es sur des tablettes, via l'outil GeoPoppy pour Android , qui permet d'embarquer l'application Lizmap en mode d\u00e9connect\u00e9 . Dans ce contexte GeoPoppy , il faut donc que les projets QGIS *.qgs et les configurations Lizmap *.qgs.cfg soient: r\u00e9cup\u00e9r\u00e9s depuis le serveur central, par exemple via FTP adapt\u00e9s pour utiliser les donn\u00e9es de la base PostgreSQL clone de la tablette, en modifiant les informations de connexion charg\u00e9s sur le clone (tablette) pour \u00eatre consult\u00e9s via Lizmap L'extension LizSync pour QGIS propose des algorithmes qui facilient le transfert des projets QGIS depuis le serveur FTP central vers les clones. Installation et configuration dans QGIS # Dans QGIS, il faut: installer le plugin LizSync configurer les connexions PostgreSQL vers la base centrale et les bases clone Installation de l'extension LizSync pour QGIS # L'extension LizSync peut \u00eatre install\u00e9 dans QGIS avec le gestionnaire d'extension . Tant que l'extension n'est pas incluse dans les d\u00e9p\u00f4ts officiels de QGIS, elle peut \u00eatre r\u00e9cup\u00e9r\u00e9e en ajoutant manuellement le d\u00e9p\u00f4t d'extension: ouvrir le Gestionnaire d'extension via le menu Extension de QGIS. dans l'onglet Param\u00e8tres , dans le groupe D\u00e9p\u00f4ts d'extensions , cliquer sur le bouton Ajouter , puis renseigner les champs suivants Nom : 3liz extension LizSync Github URL : https://github.com/3liz/qgis-lizsync-plugin/releases/latest/download/plugins.xml Authentification : laisser vide Compatible : laiss\u00e9 coch\u00e9 Valider , puis cliquer sur le bouton Recharger tous les d\u00e9p\u00f4ts Ensuite, chercher l'extension dans la liste via l'onglet Tout en tapant lizsync dans le champ Rechercher , puis l'installer. Les algorithmes du plugin LizSync # L'extension LizSync a ajout\u00e9 des algorithmes dans le menu Traitement de QGIS, qui permettent de suivre les diff\u00e9rentes \u00e9tapes pr\u00e9cis\u00e9es dans le sc\u00e9nario d'utilisation. Pour voir la liste des algorithmes disponibles, il faut ouvrir le panneau Bo\u00eete \u00e0 outils de traitements \u00e0 partir du menu Traitement de QGIS, puis chercher LizSync Chaque algorithme joue un r\u00f4le dans le sc\u00e9nario classique d'utilisation. Configurer les acc\u00e8s PostgreSQL dans QGIS # Avant de pouvoir utiliser l'extension LizSync , vous devez configurer les connexions PostgreSQL \u00e0 la base de donn\u00e9es centrale, et \u00e0 la base de donn\u00e9es clone. Pour cela, utiliser le menu Couches / Ajouter une couche vecteur / Ajouter une couche PostGIS et cliquer sur le bouton Nouveau situ\u00e9 sous la liste d\u00e9roulante. Renseignez-bien: le nom est libre. Veillez bien \u00e0 utiliser un nom qui caract\u00e9rise de mani\u00e8re unique la base de donn\u00e9es. Par exemple Base centrale , Clone A ou Tablette XYZ le service : il doit \u00eatre laiss\u00e9 vide si vous souhaitez renseigner les champs suivants (h\u00f4te, port, etc.). Si vous indiquez un nom, il doit correspondre \u00e0 un service valide. Voir la documentation de QGIS: https://docs.qgis.org/3.10/fr/docs/user_manual/managing_data_source/opening_data.html#postgresql-service-connection-file l' h\u00f4te : renseigner l'adresse IP du serveur le port : donner le port, par d\u00e9faut 5432 la base de donn\u00e9es : pr\u00e9ciser le nom de la base de donn\u00e9es Authentification de base Nom d'utilisateur : l'utilisateur qui peut se connecter. Cocher la case Stocker Mot de passe : son mot de passe. Cocher la case Stocker Cliquer sur le bouton Tester la connexion Cocher la case Utiliser la table de m\u00e9tadonn\u00e9es estim\u00e9es Dans la suite de ce document, nous appellerons centrale et clone a les deux bases de donn\u00e9es configur\u00e9es. Base clone sur le GeoPoppy # Lorsque le clone est une tablette Android sur laquelle est install\u00e9 l'outil GeoPoppy (via le logiciel UserLand), vous devez au pr\u00e9alable: connecter la tablette en WIFI sur le m\u00eame r\u00e9seau que votre ordinateur lancer la session GeoPoppy via le logiciel UserLand Renseigner le mot de passe geopoppy Les services sont lanc\u00e9s, et \u00e0 la fin un message fourni l' adresse IP de la tablette . Dans votre logiciel QGIS, vous pouvez maintenant cr\u00e9er une connexion PostgreSQL, avec les informations suivantes: Nom : libre, par exemple Tablette GeoPoppy h\u00f4te : l'IP de la tablette sur le r\u00e9seau WIFI, affich\u00e9e dans la session. Par example 192.168.1.7 base de donn\u00e9es : geopoppy utilisateur : geopoppy mot de passe : geopoppy Vous pouvez tester que la connexion fonctionne bien, par exemple avec le gestionnaire de bases de donn\u00e9es de QGIS: menu Base de donn\u00e9es / Gestionnaire de base de donn\u00e9es . Synchronisation des donn\u00e9es PostgreSQL # Rappel des \u00e9tapes cl\u00e9s de mise-en-oeuvre # Une base de donn\u00e9es centrale contient les donn\u00e9es. On souhaite exporter certaines de ces donn\u00e9es dans des bases clone , modifier les donn\u00e9es, puis synchroniser les modifications entre les bases. Les \u00e9tapes sont les suivantes: les outils LizSync sont isntall\u00e9s sur la base de donn\u00e9es centrale la base centrale est pr\u00e9par\u00e9e : ajout des m\u00e9tadonn\u00e9es lizsync, des champs uid sur les tables, des triggers d'audits, etc. une archive ZIP est cr\u00e9\u00e9e \u00e0 partir des donn\u00e9es de la base centrale l'archive est charg\u00e9e sur un ou plusieurs clones , ce qui est consid\u00e9r\u00e9 comme une synchronisation compl\u00e8te . les donn\u00e9es sont modifi\u00e9es sur la base centrale et les clones: ajout, suppression, modification une synchronisation bidirectionnelle est lanc\u00e9e depuis chaque clone lorsque les clones sont connect\u00e9s \u00e0 internet Choix techniques de LizSync # Certains choix m\u00e9thodologiques et techniques ont \u00e9t\u00e9 faits pour assurer la synchronisation bidirectionnelle. la base centrale stocke dans les sch\u00e9ma lizsync et audit les donn\u00e9es n\u00e9cessaires aux synchronisations. les donn\u00e9es du sch\u00e9ma public ne sont jamais synchronis\u00e9es les tables doivent avoir une cl\u00e9 primaire de type entier, autoincr\u00e9ment\u00e9e . Cet identifiant pourrait diverger entre la base centrale et les clones. Il n'est utile que localement pour certaines applications (QGIS pr\u00e9f\u00e8re qu'il y ait une cl\u00e9 primaire enti\u00e8re) les tables doivent toutes poss\u00e9der un champ uid de type uuid (valeur exemple: 5d3d503c-6d97-f11e-a2a4-5db030060f6d ) avec une valeur par d\u00e9faut automatique. Ce champ est le pivot de la synchronisation. Il permet de reconna\u00eetre de mani\u00e8re unique un objet entre toutes les bases de donn\u00e9es. les r\u00e9f\u00e9rences de cl\u00e9s \u00e9trang\u00e8res doivent se baser sur le champ uid de la table parente, et non sur la cl\u00e9 primaire, car les cl\u00e9s primaires peuvent diverger entre bases. lors de la synchronisation bidirectionnelle, les modifications de la base centrale sont r\u00e9cup\u00e9r\u00e9es, puis compar\u00e9es \u00e0 celles du clone pour g\u00e9rer les conflits d'\u00e9dition. Elles sont ensuite rejou\u00e9es sur le clone et la base centrale. les modifications de donn\u00e9es sont rejou\u00e9es seulement pour les champs modifi\u00e9s. Utilisation de l'extension LizSync pour la synchronisation PostgreSQL # Installer les outils LizSync sur la base centrale # Cet algorithme va cr\u00e9er 2 nouveaux sch\u00e9mas lizsync et audit sur la base de donn\u00e9es centrale: Un sch\u00e9ma audit avec les fonctions et tables d'audit, c'est-\u00e0-dire de suivi des modifications dans les tables (ajout, modification et suppression de donn\u00e9es) Un sch\u00e9ma lizsync avec les tables et fonctions n\u00e9cessaires pour faire fonctionner la synchronisation. Attention ! Si vous cochez la case \u00e9craser , vous perdrez toutes les donn\u00e9es existantes dans le sch\u00e9ma audit et/ou le sch\u00e9ma lizsync ! Pr\u00e9parer la base centrale # Pr\u00e9pare la base de donn\u00e9es PostgreSQL du serveur central avec les informations n\u00e9cessaires pour l'outil LizSync. LizSync a besoin : d'un ID de serveur stock\u00e9 dans la table lizsync.server_metadata Toutes les tables des sch\u00e9mas choisis doivent avoir une colonne d'identifiant unique (uid) contenant un UUID Toutes les tables des sch\u00e9mas choisis doivent \u00eatre suivies par les triggers d'audit Vous pouvez fournir une liste de sch\u00e9mas PostgreSQL de la base centrale, cet algorithme ajoutera les \u00e9l\u00e9ments n\u00e9cessaires si besoin. Cr\u00e9er une archive de donn\u00e9es depuis la base centrale # R\u00e9cup\u00e8re des donn\u00e9es depuis la base de donn\u00e9es centrale, pour un futur chargement sur un ou plusieurs clone(s). Ce script sauvegarde toutes les donn\u00e9es de la liste de sch\u00e9mas sp\u00e9cifi\u00e9e vers une archive ZIP , nomm\u00e9e par d\u00e9faut central_database_package.zip . Vous pouvez ajouter un fichier SQL optionnel qui sera lanc\u00e9 sur le clone apr\u00e8s chargement des donn\u00e9es de l'archive. Ce fichier doit contenir des requ\u00eates PostgreSQL valides , et peut \u00eatre utilis\u00e9 pour: ajouter des fonctions PostgreSQL utiles supprimer certains triggers enlever certaines contraintes sur les champs L'id\u00e9e est d'adapter le contenu de la base \u00e0 l'usage local sur le clone. Une connexion internet vers la base centrale est n\u00e9cessaire pour pouvoir cr\u00e9er un item d'historique de synchronisation sur la base centrale dans la table lizsync.history , et naturellement pour pouvoir t\u00e9l\u00e9charger les donn\u00e9es de la base de donn\u00e9es centrale. Charger l'archive vers le clone # Charger une archive ZIP , g\u00e9n\u00e9r\u00e9e pr\u00e9c\u00e9demment via l'algorithme Cr\u00e9er une archive de donn\u00e9es depuis la base centrale , vers le clone choisi. Cette archive ZIP, nomm\u00e9e par d\u00e9faut central_database_package.zip , contient les donn\u00e9es sauvegard\u00e9es depuis la base PostgreSQL centrale . A la fin de cette \u00e9tape, les donn\u00e9es sont pr\u00eates \u00e0 \u00eatre modifi\u00e9es sur le clone et sur la base centrale. Synchronisation bi-directionnelle # Ce script lance une synchronisation bi-directionnelle entre la base de donn\u00e9es centrale et le clone. Les donn\u00e9es \u00e0 synchroniser sont r\u00e9cup\u00e9r\u00e9es en lisant le contenu de la table audit.logged_actions de chaque base de donn\u00e9es, depuis la derni\u00e8re synchronisation ou le dernier chargement d'une archive ZIP (synchronisation compl\u00e8te). Les logs de modification des donn\u00e9es sont transform\u00e9s en commandes SQL INSERT , UPDATE , DELETE qui sont jou\u00e9es sur les bases de donn\u00e9es dans cet ordre: Depuis le serveur central vers le clone Depuis le clone vers le serveur central Pour les UPDATE , les logs sont compar\u00e9s pour g\u00e9rer les conflits, c'est-\u00e0-dire les modifications effectu\u00e9es sur une m\u00eame table, un m\u00eame objet et sur un m\u00eame champ . La modification r\u00e9alis\u00e9e la derni\u00e8re (date de modification sur la base) est conserv\u00e9e, la plus ancienne est rejet\u00e9e. La base de donn\u00e9es centrale stocke quels sont les clones qui ont rejou\u00e9s les logs de modification, et garde un historique des synchronisations . Les conflits sont list\u00e9s dans la table lizsync.conflicts de la base centrale . Synchronisation des projets QGIS et des fichiers # L'application Lizmap du GeoPoppy a besoin de projets QGIS configur\u00e9s avec le plugin Lizmap . Ces projets QGIS peuvent \u00eatre des projets existants, mais doivent \u00eatre adapt\u00e9s au contexte du GeoPoppy , notamment les informations de connexion PostgreSQL, pour que les donn\u00e9es utilis\u00e9es soient les donn\u00e9es locales du GeoPoppy (base clone) et non les donn\u00e9es sur la base centrale. Cela permet ainsi de partir avec la tablette en mode d\u00e9connect\u00e9 (sans connection internet). Les donn\u00e9es visualis\u00e9es et modifi\u00e9es sont stock\u00e9es dans la base de donn\u00e9es PostgreSQL de la tablette (clone), et pourront \u00eatre synchronis\u00e9es une fois la connexion internet retrouv\u00e9e. R\u00e9cup\u00e9rer les projets QGIS et les fichiers depuis le serveur central # Cet algorithme permet de r\u00e9aliser la r\u00e9cup\u00e9ration des projets QGIS, des configurations Lizmap et des fichiers depuis un serveur FTP central . Ce serveur FTP est souvent d\u00e9j\u00e0 utilis\u00e9 pour publier des projets QGIS sur l'application Lizmap du serveur central. Tous les fichiers non pr\u00e9sents dans le r\u00e9pertoire de destination sont automatiquement r\u00e9cup\u00e9r\u00e9s. Les fichiers qui n'ont pas \u00e9t\u00e9 modifi\u00e9s ne sont pas t\u00e9l\u00e9charg\u00e9s, pour \u00e9viter un temps trop long de t\u00e9l\u00e9chargement. Si la derni\u00e8re case est coch\u00e9e, les informations de connexion \u00e0 la base de donn\u00e9es centrale seront remplac\u00e9es par celles du Geopoppy : h\u00f4te, port, base de donn\u00e9es, utilisateur et mot de passe. Les projets pourront donc ensuite \u00eatre envoy\u00e9s sur le clone pour \u00eatre consult\u00e9s en mode d\u00e9connect\u00e9, puisqu'ils appellent les donn\u00e9es locale du clone, et non de la base centrale. Envoyer les projets QGIS locaux et les fichiers sur le clone # Une fois les projets r\u00e9cup\u00e9r\u00e9s depuis le serveur FTP central, et adapt\u00e9s pour le GeoPoppy, il faut les envoyer sur le clone (la tablette). Pour cela, vous pouvez utiliser 2 m\u00e9thodes : Par transfert via cable USB Avec l'algorithme Envoyer les projets QGIS locaux et les fichiers sur le clone via FTP Transfert par cable USB # Une fois la tablette branch\u00e9e par cable USB \u00e0 votre ordinateur, le message suivant doit s'afficher: Autoriser acc\u00e8s aux donn\u00e9es de la tablette ? L'appareil connect\u00e9 va pouvoir acc\u00e9der aux donn\u00e9es se trouvant sur cette tablette : Cliquer sur le bouton Autoriser , Ouvrir votre explorateur de fichiers sur votre ordinateur Trouver le point de montage correspondant \u00e0 la tablette, et naviguer dans le r\u00e9pertoire Android/data/tech.ula/files/storage/geopoppy/qgis/ Vous pouvez ensuite copier/colller les projets QGIS et les fichiers r\u00e9cup\u00e9r\u00e9s auparavant dans le r\u00e9pertoire Android/data/tech.ula/files/storage/geopoppy/qgis/ . Veillez \u00e0 bien avoir auparavant supprim\u00e9 les fichiers inutiles pour votre session terrain, et adapt\u00e9 les projets QGIS \u00e0 la connexion locale de la base clone de la tablette. La m\u00e9thode par connexion USB sera probablement la plus rapide, notamment si vous devez envoyer des fichiers volumineux (orthophotos par exemple). Avec l'algorithme \"Envoyer les projets QGIS locaux et les fichiers sur le clone via FTP\" # Cet algorithme supprimera les projets QGIS et les configurations Lizmap pr\u00e9sentes sur la tablette, puis lancera la synchronisation des donn\u00e9es. Une fois les projets QGIS et les configurations Lizmap envoy\u00e9s, vous pouvez utiliser l'application Lizmap install\u00e9e sur la tablette pour ouvrir la carte et utiliser les fonctionnalit\u00e9s de visualisation et d'\u00e9dition de donn\u00e9es.","title":"Installation et utilisation de LizSync sur QGIS"},{"location":"old_french_documentation/qgis-lizsync-plugin/#installation-et-utilisation-de-lizsync-sur-qgis","text":"","title":"Installation et utilisation de LizSync sur QGIS"},{"location":"old_french_documentation/qgis-lizsync-plugin/#introduction","text":"Ce document pr\u00e9sente l'outil LizSync qui permet de mettre en oeuvre la synchronisation entre une base de donn\u00e9es PostgreSQL centrale et une ou plusieurs bases de donn\u00e9es clone. LizSync permet le d\u00e9ploiement et la synchronisation des donn\u00e9es entre une unique base de donn\u00e9es centrale et un ou plusieurs clones: base de donn\u00e9es centrale : c'est la base de production qui contient l'ensemble des donn\u00e9es. base de donn\u00e9es clone : c'est une base install\u00e9e sur un ordinateur, une tablette ou un autre serveur. Elle contient un sous-ensemble des sch\u00e9mas de la base centrale Une extension LizSync pour QGIS permet de lancer les diff\u00e9rentes actions n\u00e9cessaires pour faire fonctionner cet outil: installation, pr\u00e9paration de la base centrale, cr\u00e9ation et d\u00e9ploiement d'archive, synchronisation.","title":"Introduction"},{"location":"old_french_documentation/qgis-lizsync-plugin/#scenario-et-concepts","text":"","title":"Sc\u00e9nario et concepts"},{"location":"old_french_documentation/qgis-lizsync-plugin/#donnees-en-base-postgresql","text":"Une base PostgreSQL appel\u00e9e centrale contient un ensemble complet de donn\u00e9es, organis\u00e9es dans des sch\u00e9mas . Aucune donn\u00e9e n'est stock\u00e9e dans le sch\u00e9ma public . Avant de pouvoir utiliser LizSync , on doit d'abord l' installer sur la base centrale , afin d'ajouter les sch\u00e9mas, tables et fonctions qui permettent de g\u00e9rer la synchronisation. Toutes les donn\u00e9es relatives aux synchronisations seront stock\u00e9es dans le sch\u00e9ma lizsync . Les tables du sch\u00e9ma audit enregistreront les modifications r\u00e9alis\u00e9es sur les donn\u00e9es des autres sch\u00e9mas. Ensuite, il faut pr\u00e9parer cette base centrale , c'est-\u00e0-dire s'assurer que les tables \u00e0 synchroniser comportent les champs requis, notamment un identifiant unique (UUID), et que les modifications sur ces tables sont bien enregistr\u00e9es au fil de l'eau via l'outil d'audit de LizSync. Lorsque la base centrale est pr\u00eate, il est alors possible de cr\u00e9er une archive de donn\u00e9es pour un ou plusieurs sch\u00e9mas. Cette archive contient les donn\u00e9es des sch\u00e9mas, mais aussi les m\u00e9tadonn\u00e9es utiles de la base centrale (identifiant unique). La cr\u00e9ation de l'archive est vue pour LizSync comme une action de synchronisation , dite compl\u00e8te. Cette archive est ensuite charg\u00e9e vers la base clone (vers un ou plusieurs clones), ce qui supprime l'ensemble des donn\u00e9es du clone pour les sch\u00e9mas de l'archive, puis r\u00e9installe les outils LizSync sur le clone et enfin charge les donn\u00e9es. A l'issu de cette phase, les donn\u00e9es du clone pour les sch\u00e9mas choisis sont \u00e9quivalentes aux donn\u00e9es qui \u00e9taient pr\u00e9sentes lors de la cr\u00e9ation de l'archive. Les donn\u00e9es des bases centrales et clone peuvent alors \u00e9voluer librement en parall\u00e8le, tant que la structure n'est pas modifi\u00e9e (pas d'ajout de tables ou de champs). Par exemple via une saisie de donn\u00e9es terrain avec des tablettes sur les bases clones. Une synchronisation bidirectionnelle peut alors \u00eatre effectu\u00e9e pour r\u00e9cup\u00e9rer sur le clone les changements apparus sur la base centrale, puis envoyer sur la base centrale les modifications des donn\u00e9es du clone.","title":"Donn\u00e9es en base PostgreSQL"},{"location":"old_french_documentation/qgis-lizsync-plugin/#cartes-lizmap-dans-le-contexte-geopoppy","text":"Pour pouvoir \u00e9diter les donn\u00e9es dans les bases PostgreSQL, il est possible d'utiliser n'importe quel logiciel: QGIS, QField, PgAdmin, des scripts SQL lanc\u00e9s manuellement, etc. L'outil Lizmap Web Client peut aussi \u00eatre utilis\u00e9 pour r\u00e9aliser ces \u00e9ditions: sur la base centrale , avec l'application Lizmap accessible en ligne sur les bases clone embarqu\u00e9es sur des tablettes, via l'outil GeoPoppy pour Android , qui permet d'embarquer l'application Lizmap en mode d\u00e9connect\u00e9 . Dans ce contexte GeoPoppy , il faut donc que les projets QGIS *.qgs et les configurations Lizmap *.qgs.cfg soient: r\u00e9cup\u00e9r\u00e9s depuis le serveur central, par exemple via FTP adapt\u00e9s pour utiliser les donn\u00e9es de la base PostgreSQL clone de la tablette, en modifiant les informations de connexion charg\u00e9s sur le clone (tablette) pour \u00eatre consult\u00e9s via Lizmap L'extension LizSync pour QGIS propose des algorithmes qui facilient le transfert des projets QGIS depuis le serveur FTP central vers les clones.","title":"Cartes Lizmap dans le contexte GeoPoppy"},{"location":"old_french_documentation/qgis-lizsync-plugin/#installation-et-configuration-dans-qgis","text":"Dans QGIS, il faut: installer le plugin LizSync configurer les connexions PostgreSQL vers la base centrale et les bases clone","title":"Installation et configuration dans QGIS"},{"location":"old_french_documentation/qgis-lizsync-plugin/#installation-de-lextension-lizsync-pour-qgis","text":"L'extension LizSync peut \u00eatre install\u00e9 dans QGIS avec le gestionnaire d'extension . Tant que l'extension n'est pas incluse dans les d\u00e9p\u00f4ts officiels de QGIS, elle peut \u00eatre r\u00e9cup\u00e9r\u00e9e en ajoutant manuellement le d\u00e9p\u00f4t d'extension: ouvrir le Gestionnaire d'extension via le menu Extension de QGIS. dans l'onglet Param\u00e8tres , dans le groupe D\u00e9p\u00f4ts d'extensions , cliquer sur le bouton Ajouter , puis renseigner les champs suivants Nom : 3liz extension LizSync Github URL : https://github.com/3liz/qgis-lizsync-plugin/releases/latest/download/plugins.xml Authentification : laisser vide Compatible : laiss\u00e9 coch\u00e9 Valider , puis cliquer sur le bouton Recharger tous les d\u00e9p\u00f4ts Ensuite, chercher l'extension dans la liste via l'onglet Tout en tapant lizsync dans le champ Rechercher , puis l'installer.","title":"Installation de l'extension LizSync pour QGIS"},{"location":"old_french_documentation/qgis-lizsync-plugin/#les-algorithmes-du-plugin-lizsync","text":"L'extension LizSync a ajout\u00e9 des algorithmes dans le menu Traitement de QGIS, qui permettent de suivre les diff\u00e9rentes \u00e9tapes pr\u00e9cis\u00e9es dans le sc\u00e9nario d'utilisation. Pour voir la liste des algorithmes disponibles, il faut ouvrir le panneau Bo\u00eete \u00e0 outils de traitements \u00e0 partir du menu Traitement de QGIS, puis chercher LizSync Chaque algorithme joue un r\u00f4le dans le sc\u00e9nario classique d'utilisation.","title":"Les algorithmes du plugin LizSync"},{"location":"old_french_documentation/qgis-lizsync-plugin/#configurer-les-acces-postgresql-dans-qgis","text":"Avant de pouvoir utiliser l'extension LizSync , vous devez configurer les connexions PostgreSQL \u00e0 la base de donn\u00e9es centrale, et \u00e0 la base de donn\u00e9es clone. Pour cela, utiliser le menu Couches / Ajouter une couche vecteur / Ajouter une couche PostGIS et cliquer sur le bouton Nouveau situ\u00e9 sous la liste d\u00e9roulante. Renseignez-bien: le nom est libre. Veillez bien \u00e0 utiliser un nom qui caract\u00e9rise de mani\u00e8re unique la base de donn\u00e9es. Par exemple Base centrale , Clone A ou Tablette XYZ le service : il doit \u00eatre laiss\u00e9 vide si vous souhaitez renseigner les champs suivants (h\u00f4te, port, etc.). Si vous indiquez un nom, il doit correspondre \u00e0 un service valide. Voir la documentation de QGIS: https://docs.qgis.org/3.10/fr/docs/user_manual/managing_data_source/opening_data.html#postgresql-service-connection-file l' h\u00f4te : renseigner l'adresse IP du serveur le port : donner le port, par d\u00e9faut 5432 la base de donn\u00e9es : pr\u00e9ciser le nom de la base de donn\u00e9es Authentification de base Nom d'utilisateur : l'utilisateur qui peut se connecter. Cocher la case Stocker Mot de passe : son mot de passe. Cocher la case Stocker Cliquer sur le bouton Tester la connexion Cocher la case Utiliser la table de m\u00e9tadonn\u00e9es estim\u00e9es Dans la suite de ce document, nous appellerons centrale et clone a les deux bases de donn\u00e9es configur\u00e9es.","title":"Configurer les acc\u00e8s PostgreSQL dans QGIS"},{"location":"old_french_documentation/qgis-lizsync-plugin/#base-clone-sur-le-geopoppy","text":"Lorsque le clone est une tablette Android sur laquelle est install\u00e9 l'outil GeoPoppy (via le logiciel UserLand), vous devez au pr\u00e9alable: connecter la tablette en WIFI sur le m\u00eame r\u00e9seau que votre ordinateur lancer la session GeoPoppy via le logiciel UserLand Renseigner le mot de passe geopoppy Les services sont lanc\u00e9s, et \u00e0 la fin un message fourni l' adresse IP de la tablette . Dans votre logiciel QGIS, vous pouvez maintenant cr\u00e9er une connexion PostgreSQL, avec les informations suivantes: Nom : libre, par exemple Tablette GeoPoppy h\u00f4te : l'IP de la tablette sur le r\u00e9seau WIFI, affich\u00e9e dans la session. Par example 192.168.1.7 base de donn\u00e9es : geopoppy utilisateur : geopoppy mot de passe : geopoppy Vous pouvez tester que la connexion fonctionne bien, par exemple avec le gestionnaire de bases de donn\u00e9es de QGIS: menu Base de donn\u00e9es / Gestionnaire de base de donn\u00e9es .","title":"Base clone sur le GeoPoppy"},{"location":"old_french_documentation/qgis-lizsync-plugin/#synchronisation-des-donnees-postgresql","text":"","title":"Synchronisation des donn\u00e9es PostgreSQL"},{"location":"old_french_documentation/qgis-lizsync-plugin/#rappel-des-etapes-cles-de-mise-en-oeuvre","text":"Une base de donn\u00e9es centrale contient les donn\u00e9es. On souhaite exporter certaines de ces donn\u00e9es dans des bases clone , modifier les donn\u00e9es, puis synchroniser les modifications entre les bases. Les \u00e9tapes sont les suivantes: les outils LizSync sont isntall\u00e9s sur la base de donn\u00e9es centrale la base centrale est pr\u00e9par\u00e9e : ajout des m\u00e9tadonn\u00e9es lizsync, des champs uid sur les tables, des triggers d'audits, etc. une archive ZIP est cr\u00e9\u00e9e \u00e0 partir des donn\u00e9es de la base centrale l'archive est charg\u00e9e sur un ou plusieurs clones , ce qui est consid\u00e9r\u00e9 comme une synchronisation compl\u00e8te . les donn\u00e9es sont modifi\u00e9es sur la base centrale et les clones: ajout, suppression, modification une synchronisation bidirectionnelle est lanc\u00e9e depuis chaque clone lorsque les clones sont connect\u00e9s \u00e0 internet","title":"Rappel des \u00e9tapes cl\u00e9s de mise-en-oeuvre"},{"location":"old_french_documentation/qgis-lizsync-plugin/#choix-techniques-de-lizsync","text":"Certains choix m\u00e9thodologiques et techniques ont \u00e9t\u00e9 faits pour assurer la synchronisation bidirectionnelle. la base centrale stocke dans les sch\u00e9ma lizsync et audit les donn\u00e9es n\u00e9cessaires aux synchronisations. les donn\u00e9es du sch\u00e9ma public ne sont jamais synchronis\u00e9es les tables doivent avoir une cl\u00e9 primaire de type entier, autoincr\u00e9ment\u00e9e . Cet identifiant pourrait diverger entre la base centrale et les clones. Il n'est utile que localement pour certaines applications (QGIS pr\u00e9f\u00e8re qu'il y ait une cl\u00e9 primaire enti\u00e8re) les tables doivent toutes poss\u00e9der un champ uid de type uuid (valeur exemple: 5d3d503c-6d97-f11e-a2a4-5db030060f6d ) avec une valeur par d\u00e9faut automatique. Ce champ est le pivot de la synchronisation. Il permet de reconna\u00eetre de mani\u00e8re unique un objet entre toutes les bases de donn\u00e9es. les r\u00e9f\u00e9rences de cl\u00e9s \u00e9trang\u00e8res doivent se baser sur le champ uid de la table parente, et non sur la cl\u00e9 primaire, car les cl\u00e9s primaires peuvent diverger entre bases. lors de la synchronisation bidirectionnelle, les modifications de la base centrale sont r\u00e9cup\u00e9r\u00e9es, puis compar\u00e9es \u00e0 celles du clone pour g\u00e9rer les conflits d'\u00e9dition. Elles sont ensuite rejou\u00e9es sur le clone et la base centrale. les modifications de donn\u00e9es sont rejou\u00e9es seulement pour les champs modifi\u00e9s.","title":"Choix techniques de LizSync"},{"location":"old_french_documentation/qgis-lizsync-plugin/#utilisation-de-lextension-lizsync-pour-la-synchronisation-postgresql","text":"","title":"Utilisation de l'extension LizSync pour la synchronisation PostgreSQL"},{"location":"old_french_documentation/qgis-lizsync-plugin/#installer-les-outils-lizsync-sur-la-base-centrale","text":"Cet algorithme va cr\u00e9er 2 nouveaux sch\u00e9mas lizsync et audit sur la base de donn\u00e9es centrale: Un sch\u00e9ma audit avec les fonctions et tables d'audit, c'est-\u00e0-dire de suivi des modifications dans les tables (ajout, modification et suppression de donn\u00e9es) Un sch\u00e9ma lizsync avec les tables et fonctions n\u00e9cessaires pour faire fonctionner la synchronisation. Attention ! Si vous cochez la case \u00e9craser , vous perdrez toutes les donn\u00e9es existantes dans le sch\u00e9ma audit et/ou le sch\u00e9ma lizsync !","title":"Installer les outils LizSync sur la base centrale"},{"location":"old_french_documentation/qgis-lizsync-plugin/#preparer-la-base-centrale","text":"Pr\u00e9pare la base de donn\u00e9es PostgreSQL du serveur central avec les informations n\u00e9cessaires pour l'outil LizSync. LizSync a besoin : d'un ID de serveur stock\u00e9 dans la table lizsync.server_metadata Toutes les tables des sch\u00e9mas choisis doivent avoir une colonne d'identifiant unique (uid) contenant un UUID Toutes les tables des sch\u00e9mas choisis doivent \u00eatre suivies par les triggers d'audit Vous pouvez fournir une liste de sch\u00e9mas PostgreSQL de la base centrale, cet algorithme ajoutera les \u00e9l\u00e9ments n\u00e9cessaires si besoin.","title":"Pr\u00e9parer la base centrale"},{"location":"old_french_documentation/qgis-lizsync-plugin/#creer-une-archive-de-donnees-depuis-la-base-centrale","text":"R\u00e9cup\u00e8re des donn\u00e9es depuis la base de donn\u00e9es centrale, pour un futur chargement sur un ou plusieurs clone(s). Ce script sauvegarde toutes les donn\u00e9es de la liste de sch\u00e9mas sp\u00e9cifi\u00e9e vers une archive ZIP , nomm\u00e9e par d\u00e9faut central_database_package.zip . Vous pouvez ajouter un fichier SQL optionnel qui sera lanc\u00e9 sur le clone apr\u00e8s chargement des donn\u00e9es de l'archive. Ce fichier doit contenir des requ\u00eates PostgreSQL valides , et peut \u00eatre utilis\u00e9 pour: ajouter des fonctions PostgreSQL utiles supprimer certains triggers enlever certaines contraintes sur les champs L'id\u00e9e est d'adapter le contenu de la base \u00e0 l'usage local sur le clone. Une connexion internet vers la base centrale est n\u00e9cessaire pour pouvoir cr\u00e9er un item d'historique de synchronisation sur la base centrale dans la table lizsync.history , et naturellement pour pouvoir t\u00e9l\u00e9charger les donn\u00e9es de la base de donn\u00e9es centrale.","title":"Cr\u00e9er une archive de donn\u00e9es depuis la base centrale"},{"location":"old_french_documentation/qgis-lizsync-plugin/#charger-larchive-vers-le-clone","text":"Charger une archive ZIP , g\u00e9n\u00e9r\u00e9e pr\u00e9c\u00e9demment via l'algorithme Cr\u00e9er une archive de donn\u00e9es depuis la base centrale , vers le clone choisi. Cette archive ZIP, nomm\u00e9e par d\u00e9faut central_database_package.zip , contient les donn\u00e9es sauvegard\u00e9es depuis la base PostgreSQL centrale . A la fin de cette \u00e9tape, les donn\u00e9es sont pr\u00eates \u00e0 \u00eatre modifi\u00e9es sur le clone et sur la base centrale.","title":"Charger l'archive vers le clone"},{"location":"old_french_documentation/qgis-lizsync-plugin/#synchronisation-bi-directionnelle","text":"Ce script lance une synchronisation bi-directionnelle entre la base de donn\u00e9es centrale et le clone. Les donn\u00e9es \u00e0 synchroniser sont r\u00e9cup\u00e9r\u00e9es en lisant le contenu de la table audit.logged_actions de chaque base de donn\u00e9es, depuis la derni\u00e8re synchronisation ou le dernier chargement d'une archive ZIP (synchronisation compl\u00e8te). Les logs de modification des donn\u00e9es sont transform\u00e9s en commandes SQL INSERT , UPDATE , DELETE qui sont jou\u00e9es sur les bases de donn\u00e9es dans cet ordre: Depuis le serveur central vers le clone Depuis le clone vers le serveur central Pour les UPDATE , les logs sont compar\u00e9s pour g\u00e9rer les conflits, c'est-\u00e0-dire les modifications effectu\u00e9es sur une m\u00eame table, un m\u00eame objet et sur un m\u00eame champ . La modification r\u00e9alis\u00e9e la derni\u00e8re (date de modification sur la base) est conserv\u00e9e, la plus ancienne est rejet\u00e9e. La base de donn\u00e9es centrale stocke quels sont les clones qui ont rejou\u00e9s les logs de modification, et garde un historique des synchronisations . Les conflits sont list\u00e9s dans la table lizsync.conflicts de la base centrale .","title":"Synchronisation bi-directionnelle"},{"location":"old_french_documentation/qgis-lizsync-plugin/#synchronisation-des-projets-qgis-et-des-fichiers","text":"L'application Lizmap du GeoPoppy a besoin de projets QGIS configur\u00e9s avec le plugin Lizmap . Ces projets QGIS peuvent \u00eatre des projets existants, mais doivent \u00eatre adapt\u00e9s au contexte du GeoPoppy , notamment les informations de connexion PostgreSQL, pour que les donn\u00e9es utilis\u00e9es soient les donn\u00e9es locales du GeoPoppy (base clone) et non les donn\u00e9es sur la base centrale. Cela permet ainsi de partir avec la tablette en mode d\u00e9connect\u00e9 (sans connection internet). Les donn\u00e9es visualis\u00e9es et modifi\u00e9es sont stock\u00e9es dans la base de donn\u00e9es PostgreSQL de la tablette (clone), et pourront \u00eatre synchronis\u00e9es une fois la connexion internet retrouv\u00e9e.","title":"Synchronisation des projets QGIS et des fichiers"},{"location":"old_french_documentation/qgis-lizsync-plugin/#recuperer-les-projets-qgis-et-les-fichiers-depuis-le-serveur-central","text":"Cet algorithme permet de r\u00e9aliser la r\u00e9cup\u00e9ration des projets QGIS, des configurations Lizmap et des fichiers depuis un serveur FTP central . Ce serveur FTP est souvent d\u00e9j\u00e0 utilis\u00e9 pour publier des projets QGIS sur l'application Lizmap du serveur central. Tous les fichiers non pr\u00e9sents dans le r\u00e9pertoire de destination sont automatiquement r\u00e9cup\u00e9r\u00e9s. Les fichiers qui n'ont pas \u00e9t\u00e9 modifi\u00e9s ne sont pas t\u00e9l\u00e9charg\u00e9s, pour \u00e9viter un temps trop long de t\u00e9l\u00e9chargement. Si la derni\u00e8re case est coch\u00e9e, les informations de connexion \u00e0 la base de donn\u00e9es centrale seront remplac\u00e9es par celles du Geopoppy : h\u00f4te, port, base de donn\u00e9es, utilisateur et mot de passe. Les projets pourront donc ensuite \u00eatre envoy\u00e9s sur le clone pour \u00eatre consult\u00e9s en mode d\u00e9connect\u00e9, puisqu'ils appellent les donn\u00e9es locale du clone, et non de la base centrale.","title":"R\u00e9cup\u00e9rer les projets QGIS et les fichiers depuis le serveur central"},{"location":"old_french_documentation/qgis-lizsync-plugin/#envoyer-les-projets-qgis-locaux-et-les-fichiers-sur-le-clone","text":"Une fois les projets r\u00e9cup\u00e9r\u00e9s depuis le serveur FTP central, et adapt\u00e9s pour le GeoPoppy, il faut les envoyer sur le clone (la tablette). Pour cela, vous pouvez utiliser 2 m\u00e9thodes : Par transfert via cable USB Avec l'algorithme Envoyer les projets QGIS locaux et les fichiers sur le clone via FTP","title":"Envoyer les projets QGIS locaux et les fichiers sur le clone"},{"location":"old_french_documentation/qgis-lizsync-plugin/#transfert-par-cable-usb","text":"Une fois la tablette branch\u00e9e par cable USB \u00e0 votre ordinateur, le message suivant doit s'afficher: Autoriser acc\u00e8s aux donn\u00e9es de la tablette ? L'appareil connect\u00e9 va pouvoir acc\u00e9der aux donn\u00e9es se trouvant sur cette tablette : Cliquer sur le bouton Autoriser , Ouvrir votre explorateur de fichiers sur votre ordinateur Trouver le point de montage correspondant \u00e0 la tablette, et naviguer dans le r\u00e9pertoire Android/data/tech.ula/files/storage/geopoppy/qgis/ Vous pouvez ensuite copier/colller les projets QGIS et les fichiers r\u00e9cup\u00e9r\u00e9s auparavant dans le r\u00e9pertoire Android/data/tech.ula/files/storage/geopoppy/qgis/ . Veillez \u00e0 bien avoir auparavant supprim\u00e9 les fichiers inutiles pour votre session terrain, et adapt\u00e9 les projets QGIS \u00e0 la connexion locale de la base clone de la tablette. La m\u00e9thode par connexion USB sera probablement la plus rapide, notamment si vous devez envoyer des fichiers volumineux (orthophotos par exemple).","title":"Transfert par cable USB"},{"location":"old_french_documentation/qgis-lizsync-plugin/#avec-lalgorithme-envoyer-les-projets-qgis-locaux-et-les-fichiers-sur-le-clone-via-ftp","text":"Cet algorithme supprimera les projets QGIS et les configurations Lizmap pr\u00e9sentes sur la tablette, puis lancera la synchronisation des donn\u00e9es. Une fois les projets QGIS et les configurations Lizmap envoy\u00e9s, vous pouvez utiliser l'application Lizmap install\u00e9e sur la tablette pour ouvrir la carte et utiliser les fonctionnalit\u00e9s de visualisation et d'\u00e9dition de donn\u00e9es.","title":"Avec l'algorithme \"Envoyer les projets QGIS locaux et les fichiers sur le clone via FTP\""},{"location":"presentation-reveal/CONTRIBUTING/","text":"Contributing # Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support # If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports # When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests # Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins # Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"presentation-reveal/CONTRIBUTING/#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"presentation-reveal/CONTRIBUTING/#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"presentation-reveal/CONTRIBUTING/#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"presentation-reveal/CONTRIBUTING/#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"presentation-reveal/CONTRIBUTING/#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"presentation-reveal/css/theme/","text":"Dependencies # Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme # To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentation-reveal/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentation-reveal/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentation-reveal/plugin/markdown/example/","text":"Markdown Demo # External 1.1 # Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 # Content 1.2 External 2 # Content 2.1 External 3.1 # Content 3.1 External 3.2 # Content 3.2 External 3.3 #","title":"Markdown Demo"},{"location":"presentation-reveal/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentation-reveal/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentation-reveal/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentation-reveal/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentation-reveal/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentation-reveal/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentation-reveal/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentation-reveal/test/simple/","text":"Slide 1.1 # 1 var a = 1 ; Slide 1.2 # Slide 2 #","title":"Simple"},{"location":"presentation-reveal/test/simple/#slide-11","text":"1 var a = 1 ;","title":"Slide 1.1"},{"location":"presentation-reveal/test/simple/#slide-12","text":"","title":"Slide 1.2"},{"location":"presentation-reveal/test/simple/#slide-2","text":"","title":"Slide 2"},{"location":"processing/","text":"Processing # 01 Installation # Install Lizsync tools on the central database # Install the LizSync schema with tables and function on the central database. This script will add * An audit schema with auditing functions and tables * A lizsync schema with tables and functions Beware ! If the schema lizsync or audit already exists in the database, not installation will be made. You will need to manually correct the situation (drop or modifiy the schemas, tables and functions. Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME PostgreSQL connection to the central database String \u2713 OVERRIDE_AUDIT Drop audit schema and all data ? Boolean \u2713 OVERRIDE_LIZSYNC Drop lizsync schema and all data ? Boolean \u2713 Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Prepare the central database # Prepare the central server PostgreSQL database with the needed data for LizSync tool. LizSync needs to have : * A server ID stored in the lizsync.server_metadata table * All tables from the given schema must have a unique identifier column (uid) with standard uuid inside * All tables from the given schema must be audited (trigger of the audit tool) You can pass a list of PostgreSQL central database schemas and this alg will add the necessary data and tools Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 ADD_SERVER_ID Add server id in metadata table Boolean \u2713 Default: True ADD_UID_COLUMNS Add unique identifiers in all tables Boolean \u2713 Default: True ADD_AUDIT_TRIGGERS Add audit triggers in all tables Boolean \u2713 Default: True SCHEMAS Restrict to comma separated schema names. NB: schemas public, lizsync & audit are never processed String Default: test Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Upgrade LizSync tools in the central database # Upgrade the Lizsync tables and functions in the central database. If you have upgraded your QGIS LizSync plugin, you can run this script to upgrade your central database to the new plugin version. Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME PostgreSQL connection to the central database String \u2713 RUNIT Check this box to upgrade. No action will be done otherwise Boolean \u2713 Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String 02 PostgreSQL synchronization # Deploy a database package to the clone # Deploy a ZIP archive, previously saved with the \"Package central database\" algorithm, to the chosen clone. This ZIP archive, named by default \"central_database_package.zip\" contains data from the central PostgreSQL database. Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CONNECTION_NAME_CLONE PostgreSQL connection to the clone database String \u2713 POSTGRESQL_BINARY_PATH PostgreSQL binary path File \u2713 Default: /usr/bin/ ZIP_FILE Database ZIP archive path File Default: /tmp/central_database_package.zip RECREATE_CLONE_SERVER_ID Recreate clone server id. Do it only to fully reset the clone ID ! Boolean \u2713 Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Create a package from the central database # Package data from the central database, for future deployement on one or several clone(s). This script backups all data from the given list of schemas to a ZIP archive, named by default \"central_database_package.zip\". You can add an optionnal SQL file to run in the clone after the deployment of the archive. This file must contain valid PostgreSQL queries and can be used to drop some triggers in the clone or remove some constraints. For example \"DELETE FROM pg_trigger WHERE tgname = 'name_of_trigger';\" An internet connection is needed because a synchronization item must be written to the central database \"lizsync.history\" table during the process. and obviously data must be downloaded from the central database Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 POSTGRESQL_BINARY_PATH PostgreSQL binary path File \u2713 Default: /usr/bin/ SCHEMAS List of schemas to package, separated by commas. (schemas public, lizsync & audit are never processed) String \u2713 Default: test ADDITIONAL_SQL_FILE Additionnal SQL file to run in the clone after the ZIP deployement File ZIP_FILE Output archive file (ZIP) FileDestination \u2713 Default: /tmp/central_database_package.zip Outputs # ID Description Type Info ZIP_FILE Output archive file (ZIP) File OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Two-way database synchronization # This scripts run a two-way data synchronization between the central and clone database. The data to synchronize are listed by reading the content of the \"audit.logged_actions\" of each database, since the last synchronization or the last deployement of ZIP package. This audit data are transformed into INSERT/UPDATE/DELETE SQL queries which are played in the databases in this order: 1/ From the CENTRAL to the CLONE database 2/ From the CLONE to the CENTRAL database The central database stores which clone has replayed which audited modification, and keeps an history of synchronization items. Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CONNECTION_NAME_CLONE PostgreSQL connection to the clone database String \u2713 Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String 03 GeoPoppy file synchronization # Get projects and files from the central FTP server # Get QGIS projects and files from the give FTP server and remote directory and adapt QGIS projects for the local clone database by replacing PostgreSQL connection data with the local PostgreSQL server data. An internet connection is needed to use this algorithm Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CENTRAL_FTP_HOST Central FTP Server host String \u2713 CENTRAL_FTP_PORT Central FTP Server port Number \u2713 Default: 21 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CENTRAL_FTP_LOGIN Central FTP Server login String \u2713 CENTRAL_FTP_PASSWORD Central FTP Server password String CENTRAL_FTP_REMOTE_DIR Central FTP Server remote directory String \u2713 FTP_EXCLUDE_REMOTE_SUBDIRS List of sub-directory to exclude from synchro, separated by commas. String Default: data CLONE_QGIS_PROJECT_FOLDER Clone QGIS project folder File \u2713 REPLACE_DATASOURCE_IN_QGIS_PROJECT Adapt PostgreSQL connection parameters for GeoPoppy database ? Boolean \u2713 Default: True Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Send local QGIS projects and files to the clone FTP server # Send QGIS projects and files to the clone FTP server remote directory. This script can be used by the geomatician in charge of the deployment of data to one or several clone(s). It synchronizes the files from the given local QGIS project folder to the clone remote folder by using the given FTP connexion. This means all the files from the clone folder will be overwritten by the files from the local QGIS project folder. Beware ! This script does not adapt projects for the clone database (no modification of the PostgreSQL connexion data inside the QGIS project files) ! Parameters # ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 LOCAL_QGIS_PROJECT_FOLDER Local desktop QGIS project folder File \u2713 CLONE_FTP_HOST Clone FTP Server host String \u2713 CLONE_FTP_PORT Clone FTP Server port Number \u2713 Default: 2021 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CLONE_FTP_LOGIN Clone FTP Server login String \u2713 Default: geopoppy CLONE_FTP_PASSWORD Clone FTP Server password String CLONE_FTP_REMOTE_DIR Clone FTP Server remote directory String \u2713 Default: / FTP_EXCLUDE_REMOTE_SUBDIRS List of sub-directory to exclude from synchro, separated by commas. String Default: data Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String Synchronize the clone media subfolder to the central FTP server # Send media files, such as new images, stored in the clone QGIS \"media/upload/\" folder, TO the central FTP server remote directory \"media/upload/\" These media files can for example have been added by using Lizmap editing form. Every file existing in the clone \"media/upload/\" folder but not in the central server \"media/upload/\" folder will be sent. Parameters # ID Description Type Info Required Advanced Option LOCAL_QGIS_PROJECT_FOLDER Local QGIS project folder File \u2713 CENTRAL_FTP_HOST Central FTP Server host String \u2713 CENTRAL_FTP_PORT Central FTP Server port Number \u2713 Default: 21 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CENTRAL_FTP_LOGIN Central FTP Server login String \u2713 CENTRAL_FTP_PASSWORD Central FTP Server password String CENTRAL_FTP_REMOTE_DIR Central FTP Server remote directory String \u2713 Outputs # ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Processing"},{"location":"processing/#processing","text":"","title":"Processing"},{"location":"processing/#01-installation","text":"","title":"01 Installation"},{"location":"processing/#install-lizsync-tools-on-the-central-database","text":"Install the LizSync schema with tables and function on the central database. This script will add * An audit schema with auditing functions and tables * A lizsync schema with tables and functions Beware ! If the schema lizsync or audit already exists in the database, not installation will be made. You will need to manually correct the situation (drop or modifiy the schemas, tables and functions.","title":"Install Lizsync tools on the central database"},{"location":"processing/#parameters","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME PostgreSQL connection to the central database String \u2713 OVERRIDE_AUDIT Drop audit schema and all data ? Boolean \u2713 OVERRIDE_LIZSYNC Drop lizsync schema and all data ? Boolean \u2713","title":"Parameters"},{"location":"processing/#outputs","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#prepare-the-central-database","text":"Prepare the central server PostgreSQL database with the needed data for LizSync tool. LizSync needs to have : * A server ID stored in the lizsync.server_metadata table * All tables from the given schema must have a unique identifier column (uid) with standard uuid inside * All tables from the given schema must be audited (trigger of the audit tool) You can pass a list of PostgreSQL central database schemas and this alg will add the necessary data and tools","title":"Prepare the central database"},{"location":"processing/#parameters_1","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 ADD_SERVER_ID Add server id in metadata table Boolean \u2713 Default: True ADD_UID_COLUMNS Add unique identifiers in all tables Boolean \u2713 Default: True ADD_AUDIT_TRIGGERS Add audit triggers in all tables Boolean \u2713 Default: True SCHEMAS Restrict to comma separated schema names. NB: schemas public, lizsync & audit are never processed String Default: test","title":"Parameters"},{"location":"processing/#outputs_1","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#upgrade-lizsync-tools-in-the-central-database","text":"Upgrade the Lizsync tables and functions in the central database. If you have upgraded your QGIS LizSync plugin, you can run this script to upgrade your central database to the new plugin version.","title":"Upgrade LizSync tools in the central database"},{"location":"processing/#parameters_2","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME PostgreSQL connection to the central database String \u2713 RUNIT Check this box to upgrade. No action will be done otherwise Boolean \u2713","title":"Parameters"},{"location":"processing/#outputs_2","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#02-postgresql-synchronization","text":"","title":"02 PostgreSQL synchronization"},{"location":"processing/#deploy-a-database-package-to-the-clone","text":"Deploy a ZIP archive, previously saved with the \"Package central database\" algorithm, to the chosen clone. This ZIP archive, named by default \"central_database_package.zip\" contains data from the central PostgreSQL database.","title":"Deploy a database package to the clone"},{"location":"processing/#parameters_3","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CONNECTION_NAME_CLONE PostgreSQL connection to the clone database String \u2713 POSTGRESQL_BINARY_PATH PostgreSQL binary path File \u2713 Default: /usr/bin/ ZIP_FILE Database ZIP archive path File Default: /tmp/central_database_package.zip RECREATE_CLONE_SERVER_ID Recreate clone server id. Do it only to fully reset the clone ID ! Boolean \u2713","title":"Parameters"},{"location":"processing/#outputs_3","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#create-a-package-from-the-central-database","text":"Package data from the central database, for future deployement on one or several clone(s). This script backups all data from the given list of schemas to a ZIP archive, named by default \"central_database_package.zip\". You can add an optionnal SQL file to run in the clone after the deployment of the archive. This file must contain valid PostgreSQL queries and can be used to drop some triggers in the clone or remove some constraints. For example \"DELETE FROM pg_trigger WHERE tgname = 'name_of_trigger';\" An internet connection is needed because a synchronization item must be written to the central database \"lizsync.history\" table during the process. and obviously data must be downloaded from the central database","title":"Create a package from the central database"},{"location":"processing/#parameters_4","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 POSTGRESQL_BINARY_PATH PostgreSQL binary path File \u2713 Default: /usr/bin/ SCHEMAS List of schemas to package, separated by commas. (schemas public, lizsync & audit are never processed) String \u2713 Default: test ADDITIONAL_SQL_FILE Additionnal SQL file to run in the clone after the ZIP deployement File ZIP_FILE Output archive file (ZIP) FileDestination \u2713 Default: /tmp/central_database_package.zip","title":"Parameters"},{"location":"processing/#outputs_4","text":"ID Description Type Info ZIP_FILE Output archive file (ZIP) File OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#two-way-database-synchronization","text":"This scripts run a two-way data synchronization between the central and clone database. The data to synchronize are listed by reading the content of the \"audit.logged_actions\" of each database, since the last synchronization or the last deployement of ZIP package. This audit data are transformed into INSERT/UPDATE/DELETE SQL queries which are played in the databases in this order: 1/ From the CENTRAL to the CLONE database 2/ From the CLONE to the CENTRAL database The central database stores which clone has replayed which audited modification, and keeps an history of synchronization items.","title":"Two-way database synchronization"},{"location":"processing/#parameters_5","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CONNECTION_NAME_CLONE PostgreSQL connection to the clone database String \u2713","title":"Parameters"},{"location":"processing/#outputs_5","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#03-geopoppy-file-synchronization","text":"","title":"03 GeoPoppy file synchronization"},{"location":"processing/#get-projects-and-files-from-the-central-ftp-server","text":"Get QGIS projects and files from the give FTP server and remote directory and adapt QGIS projects for the local clone database by replacing PostgreSQL connection data with the local PostgreSQL server data. An internet connection is needed to use this algorithm","title":"Get projects and files from the central FTP server"},{"location":"processing/#parameters_6","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 CENTRAL_FTP_HOST Central FTP Server host String \u2713 CENTRAL_FTP_PORT Central FTP Server port Number \u2713 Default: 21 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CENTRAL_FTP_LOGIN Central FTP Server login String \u2713 CENTRAL_FTP_PASSWORD Central FTP Server password String CENTRAL_FTP_REMOTE_DIR Central FTP Server remote directory String \u2713 FTP_EXCLUDE_REMOTE_SUBDIRS List of sub-directory to exclude from synchro, separated by commas. String Default: data CLONE_QGIS_PROJECT_FOLDER Clone QGIS project folder File \u2713 REPLACE_DATASOURCE_IN_QGIS_PROJECT Adapt PostgreSQL connection parameters for GeoPoppy database ? Boolean \u2713 Default: True","title":"Parameters"},{"location":"processing/#outputs_6","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#send-local-qgis-projects-and-files-to-the-clone-ftp-server","text":"Send QGIS projects and files to the clone FTP server remote directory. This script can be used by the geomatician in charge of the deployment of data to one or several clone(s). It synchronizes the files from the given local QGIS project folder to the clone remote folder by using the given FTP connexion. This means all the files from the clone folder will be overwritten by the files from the local QGIS project folder. Beware ! This script does not adapt projects for the clone database (no modification of the PostgreSQL connexion data inside the QGIS project files) !","title":"Send local QGIS projects and files to the clone FTP server"},{"location":"processing/#parameters_7","text":"ID Description Type Info Required Advanced Option CONNECTION_NAME_CENTRAL PostgreSQL connection to the central database String \u2713 LOCAL_QGIS_PROJECT_FOLDER Local desktop QGIS project folder File \u2713 CLONE_FTP_HOST Clone FTP Server host String \u2713 CLONE_FTP_PORT Clone FTP Server port Number \u2713 Default: 2021 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CLONE_FTP_LOGIN Clone FTP Server login String \u2713 Default: geopoppy CLONE_FTP_PASSWORD Clone FTP Server password String CLONE_FTP_REMOTE_DIR Clone FTP Server remote directory String \u2713 Default: / FTP_EXCLUDE_REMOTE_SUBDIRS List of sub-directory to exclude from synchro, separated by commas. String Default: data","title":"Parameters"},{"location":"processing/#outputs_7","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"},{"location":"processing/#synchronize-the-clone-media-subfolder-to-the-central-ftp-server","text":"Send media files, such as new images, stored in the clone QGIS \"media/upload/\" folder, TO the central FTP server remote directory \"media/upload/\" These media files can for example have been added by using Lizmap editing form. Every file existing in the clone \"media/upload/\" folder but not in the central server \"media/upload/\" folder will be sent.","title":"Synchronize the clone media subfolder to the central FTP server"},{"location":"processing/#parameters_8","text":"ID Description Type Info Required Advanced Option LOCAL_QGIS_PROJECT_FOLDER Local QGIS project folder File \u2713 CENTRAL_FTP_HOST Central FTP Server host String \u2713 CENTRAL_FTP_PORT Central FTP Server port Number \u2713 Default: 21 Type: Integer Min: -1.7976931348623157e+308, Max: 1.7976931348623157e+308 CENTRAL_FTP_LOGIN Central FTP Server login String \u2713 CENTRAL_FTP_PASSWORD Central FTP Server password String CENTRAL_FTP_REMOTE_DIR Central FTP Server remote directory String \u2713","title":"Parameters"},{"location":"processing/#outputs_8","text":"ID Description Type Info OUTPUT_STATUS Output status Number OUTPUT_STRING Output message String","title":"Outputs"}]}